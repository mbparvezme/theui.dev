import{f as e,a as t}from"../chunks/CIHljEz0.js";import{p as C,a as I,f as u,s as n,n as P,c as x,r as A,t as M}from"../chunks/DDSqhxMg.js";import{h as E}from"../chunks/CEkn2uFW.js";import{s as k}from"../chunks/DPKhHaWt.js";import{D as S,H as D,B as _,p as b}from"../chunks/BNTF0WTh.js";import"../chunks/CciAC_Fd.js";import{E as H,C as O}from"../chunks/CyT2BtQZ.js";import{S as B}from"../chunks/BmOsGaYy.js";var G=e("<a>About</a> <a>Example</a> <a>Form Method</a> <a>Accessibility</a> <a>Configuration</a>",1),R=e('<p class="not-prose">The <code>Form</code> component is a reusable wrapper for the native HTML <code>&lt;form&gt;</code> element, designed to simplify form creation and management. While itâ€™s not mandatory to use this component for every form, its primary benefit lies in centralizing control over input styles and common behaviors. By using the Form component, you can ensure consistent styling and functionality across all forms in your application, making it easier to maintain and update them from a single place.</p>'),U=e('<pre class="language-html"><!></pre>'),j=e(`<p class="not-prose">To use the <b>Form</b> component, simply import it from the library and wrap your form inputs inside it. Here's a basic example:</p>`),q=e('<!> <p class="not-prose">The component ensures consistent styling and behavior for all child inputs, making it easier to manage forms across your application.</p>',1),z=e('<pre class="language-html"><!></pre>'),W=e('<p class="not-prose">The <code>method</code> prop specifies the HTTP method to be used when the form is submitted. It corresponds to the native HTML <code>method</code> attribute of the <b>&lt;form&gt;</b> element. Available values are <code>GET</code> and <code>POST</code>. Default <code>POST</code>.</p>'),J=e('<!> <p class="not-prose">In this example, the form will use the <code>GET</code> method when submitted, appending the form data to the URL. If no <code>method</code> is specified, it defaults to <code>POST</code>.</p>',1),K=e('<p class="not-prose">The <code>Form</code> component uses the native <code>&lt;form&gt;</code> element, which is already accessible by default. It supports all <b>ARIA</b> roles, labels, and attributes via props, ensuring that keyboard navigation and screen readers can interact with it without extra configuration. This makes it easy to use for all users, including those with disabilities.</p>'),N=e('<p class="not-prose">The <code>Form</code> component includes a set of props that are not directly applied to the form itself but are passed down to all its child inputs. These props ensure a consistent appearance and behavior across all form inputs, making it easier to maintain uniformity without manually configuring each input.</p> <!>',1),Q=e("<!> <!> <!> <!> <!> <!>",1);function V(T,r){C(r,!0),S(T,{sidebar:l=>{var d=G(),m=u(d),h=n(m,2),f=n(h,2),g=n(f,2),y=n(g,2);M(($,w,s,c,a)=>{k(m,"href",$),k(h,"href",w),k(f,"href",s),k(g,"href",c),k(y,"href",a)},[()=>b("About"),()=>b("Example"),()=>b("Form Method"),()=>b("Accessibility"),()=>b("Configuration")]),t(l,d)},children:(l,d)=>{var m=Q(),h=u(m);D(h,{title:"Form",text:"A reusable wrapper for the HTML form element, simplifying form creation, submission handling, event management and controlling all the inputs from a single place.",get edit_url(){return r.edit_url}});var f=n(h,2);_(f,{title:"About",children:(s,c)=>{var a=R();t(s,a)},$$slots:{default:!0}});var g=n(f,2);_(g,{title:"Example",children:(s,c)=>{var a=q(),v=u(a);H(v,{code:p=>{var o=U(),i=x(o);E(i,()=>`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Form <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"theui-svelte"</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form</span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- Add your form inputs here --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form</span><span class="token punctuation">></span></span></code>`),A(o),t(p,o)},children:(p,o)=>{var i=j();t(p,i)},$$slots:{code:!0,default:!0}}),P(2),t(s,a)},$$slots:{default:!0}});var y=n(g,2);_(y,{title:"Form Method",children:(s,c)=>{var a=J(),v=u(a);H(v,{code:p=>{var o=z(),i=x(o);E(i,()=>`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- Form inputs go here --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form</span><span class="token punctuation">></span></span></code>`),A(o),t(p,o)},children:(p,o)=>{var i=W();t(p,i)},$$slots:{code:!0,default:!0}}),P(2),t(s,a)},$$slots:{default:!0}});var $=n(y,2);_($,{title:"Accessibility",children:(s,c)=>{var a=K();t(s,a)},$$slots:{default:!0}});var w=n($,2);_(w,{title:"Configuration",children:(s,c)=>{var a=N(),v=n(u(a),2);O(v,{get component(){return r.component}}),t(s,a)},$$slots:{default:!0}}),t(l,m)}}),I()}var X=e("<!> <!>",1);function ra(T,r){C(r,!0);var F=X(),l=u(F);B(l,{title:"Form"});var d=n(l,2);V(d,{get component(){return r.data.component},get edit_url(){return r.data.editURL}}),t(T,F),I()}export{ra as component};
