---
title: Fieldset
category: Components
description: A wrapper for grouping related inputs, providing better structure and styling control in forms.
dir: ".lib/pages"
tags: [fieldset, form-group, inputs, structure, component, svelte, svelte-5, theui-svelte, component-library, ui, tailwindcss]
---

<script lang="ts">
  import DocLayout from "$lib/ui/doc/DocLayout.svelte";
  import DocHead from "$lib/ui/doc/Head.svelte";
  import DocBlock from "$lib/ui/doc/Block.svelte";
  import Code from "$lib/ui/doc/CodeBlock.svelte";
  import Example from "$lib/ui/doc/Example.svelte";
  import ConfigComponent from "$lib/ui/doc/ConfigComponent.svelte";
  import { processID, editURL } from "$lib";
  let { component }: {component: any } = $props();
</script>

<DocLayout>
  <DocHead title="Fieldset" text="The Fieldset component is a wrapper for input groups, providing better structure and styling control. It helps in grouping related inputs together while maintaining a consistent design." edit_url={editURL("fieldset")} />

  <DocBlock title="About">
    <p class="not-prose">The <code>Fieldset</code> component allows you to manage input styles and behaviors, but at a more granular level. While the <code>Form</code> component ensures uniform styling across all form elements, the Fieldset component lets you separate a section of inputs from others, giving you more control over a specific input group.</p>
    <p class="not-prose">This is particularly useful when you want to style or configure a subset of inputs differently from the rest of the form. It supports floating labels, different variants, animations, and more.</p>
  </DocBlock>

  <DocBlock title="Example">
    <Example>
      <p class="not-prose">The Fieldset component is useful when you need to group related inputs under a common title while maintaining a structured layout. Below are some examples of how you can use it.</p>
      {#snippet code()}

```html
<script>
  import { Fieldset } from "theui-svelte";
</script>

<Fieldset title="User Information">
  <!-- Add your form inputs here -->
</Fieldset>
```
      {/snippet}
    </Example>
  </DocBlock>

  <!-- <DocBlock title="Customization">
    <Example>
      <p class="not-prose">You can apply different variants, rounded styles, and animations to customize the Fieldset:</p>
      {#snippet code()}

```html
<Fieldset title="Address Details" variant="flat" rounded="lg" animate="fast">
</Fieldset>
```
      {/snippet}
    </Example>
  </DocBlock> -->

  <DocBlock title="Accessibility">
    <p class="not-prose">Use <code>Fieldset</code> to semantically group related inputs like checkboxes or radios. It includes a visually hidden <code>legend</code> so screen readers can announce the purpose of the group. Clean markup, meaningful structure â€” accessibility baked in.</p>
  </DocBlock>

  <DocBlock title="Configuration">
    <p class="not-prose">The <code>Fieldset</code> component includes a set of props that are not directly applied to the Fieldset itself but are inherited by all its child inputs. This allows for a consistent appearance and behavior across all enclosed form inputs, ensuring a cohesive design without the need for individual configuration.</p>
    <ConfigComponent {component} />
  </DocBlock>

  {#snippet sidebar()}
    <a href={processID("About")}>About</a>
    <a href={processID("Example")}>Example</a>
    <a href={processID("Accessibility")}>Accessibility</a>
    <a href={processID("Configuration")}>Configuration</a>
  {/snippet}


</DocLayout>