---
title: Drawer
category: Components
description: A versatile UI element that slides in from the screen edge to show extra content or navigation without blocking the main view.
dir: ".lib/pages"
tags: [drawer, sidebar, slide-in, navigation, component, svelte, svelte-5, theui-svelte, component-library, ui, tailwindcss]
---

<script lang="ts">
  import DocLayout from "$lib/ui/doc/DocLayout.svelte";
  import DocHead from "$lib/ui/doc/Head.svelte";
  import DocBlock from "$lib/ui/doc/Block.svelte";
  import Code from "$lib/ui/doc/CodeBlock.svelte";
  import Example from "$lib/ui/doc/Example.svelte";
  import ConfigComponent from "$lib/ui/doc/ConfigComponent.svelte";
  import { processID, editURL } from "$lib";
  let { component }: {component: any } = $props();

  import { Drawer, Button } from "theui-svelte";
  let openDrawer: boolean = $state(false)
</script>

<DocLayout>
  <DocHead title="Drawer" text="The Drawer component is a versatile UI element that slides in from the edge of the screen, providing a convenient way to display additional content or navigation without disrupting the main view." edit_url={editURL("drawer")} />

  <DocBlock title="Example">
    <p class="not-prose">Import the <code>Drawer</code> component first to use it in your application. Here's a basic example demonstrating how to use the Drawer component:</p>
    <Example>
      {#snippet example()}
        <Drawer label="Open Drawer">
          <div class="p-8">
            Drawer content
          </div>
        </Drawer>
      {/snippet}

      {#snippet code()}
```html
<script>
  import { Drawer } from "theui-svelte";
</script>

<Drawer label="Open Drawer">
  <div class="p-8">
    Drawer content
  </div>
</Drawer>
```
      {/snippet}
    </Example>
    <p class="not-prose">In this example, the <code>Drawer</code> slides in from the left side of the screen which is the default behavior. The trigger snippet contains a button that toggles the visibility of the Drawer. You can replace the content inside the Drawer with any elements you need.</p>
  </DocBlock>

  <DocBlock title="Position">
    <Example>
    <p class="not-prose">The <code>position</code> prop allows you to control where the Drawer appears on the screen. You can choose from four positions: <code>top</code>, <code>end</code>, <code>bottom</code>, or <code>start</code>. This flexibility lets you tailor the Drawer's placement to fit the layout and design of your application.</p>
    <p class="not-prose">Simply set the <code>position</code> prop to your desired value to change where the Drawer opens from, creating a more intuitive user experience based on your app's needs.</p>
      {#snippet example()}
        <Drawer label="Start">
          <div class="p-8">
            Start Drawer
          </div>
        </Drawer>
        <Drawer label="Top" position="top">
          <div class="p-8">
            Top Drawer
          </div>
        </Drawer>
        <Drawer label="End" position="end">
          <div class="p-8">
            End Drawer
          </div>
        </Drawer>
        <Drawer label="Bottom" position="bottom">
          <div class="p-8">
            Bottom Drawer
          </div>
        </Drawer>
      {/snippet}

      {#snippet code()}
```html
<Drawer ... position="start">...</Drawer> <!-- Default position -->
<Drawer ... position="top">...</Drawer>
<Drawer ... position="end">...</Drawer>
<Drawer ... position="bottom">...</Drawer>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Outlying Trigger">
    <p class="not-prose">You can open or close the <code>Drawer</code> from outside by binding a reactive variable to its <code>open</code> prop. This is useful when the trigger button is placed elsewhere in your layout.</p>
    <Example>
      {#snippet example()}

        <Button onclick={()=>openDrawer=!openDrawer}>Trigger drawer</Button>

        <Drawer bind:open={openDrawer}>
          <div class="p-8">
            Outlying drawer content..
          </div>
        </Drawer>

      {/snippet}

      {#snippet code()}
```html
<script>
  let openDrawer: boolean = $state(false)
</script>

<!-- Outlaying button -->
<Button onclick={()=>openDrawer=!openDrawer}>Trigger drawer</Button>

<Drawer id="myDrawerID">
  <!-- Drawer content -->  
</Drawer>
```
      {/snippet}
    </Example>
    <p class="not-prose">The <code>Button</code> updates the <code>openDrawer</code> state, and the <code>Drawer</code> reacts to it. This allows full control from any part of your component.</p>
  </DocBlock>

  <DocBlock title="Backdrop">
    <Example title="Custom Backdrop Style">
    <p class="not-prose">The Drawer includes a backdrop which is enabled by default. It can be toggled or styled using the backdrop prop. Set it to <code>false</code> to disable it, <code>true</code> for a default backdrop or provide a custom classes for styling.</p>
      {#snippet example()}
        <Drawer label="Custom Backdrop" backdrop="bg-red-500">
          <div class="p-8">
            Drawer content
          </div>
        </Drawer>
      {/snippet}

      {#snippet code()}
```html
<Drawer ... backdrop="bg-red-500">...</Drawer>
```
      {/snippet}
    </Example>
    <Example title="Preventing Backdrop Click">
    <p class="not-prose">By default, the Drawer closes when the user clicks on the backdrop. This behavior helps users easily dismiss the Drawer by clicking outside of it, enhancing usability in most scenarios.</p>
    <p class="not-prose">However, for critical tasks, you can prevent this by setting the <code>staticBackdrop</code> prop to <code>true</code>, ensuring the Drawer stays open until manually closed.</p>
      {#snippet example()}
        <Drawer label="Backdrop Click Disabled" staticBackdrop={true}>
          <div class="p-8">
            Drawer content
          </div>
        </Drawer>
      {/snippet}

      {#snippet code()}
```html
<Drawer ... staticBackdrop={true}>...</Drawer>
```
      {/snippet}
    </Example>

    <Example title="Disable Backdrop">
    <p class="not-prose">If you prefer not to use a backdrop, you can easily disable it by setting the <code>backdrop</code> prop to <code>false</code>. This will remove the backdrop entirely from the Drawer component</p>
      {#snippet example()}
        <Drawer label="Backdrop Disabled" backdrop={false}>
          <div class="p-8">
            Drawer content
          </div>
        </Drawer>
      {/snippet}

      {#snippet code()}
```html
<Drawer ... backdrop={false}>...</Drawer>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Animation Speed">
    <Example>
      <p class="not-prose">The animationSpeed prop controls how quickly the Drawer appears or disappears. It supports the following values: <code>"none"</code>, <code>"slower"</code>, <code>"slow"</code>, <code>"normal"</code>, <code>"fast"</code> (default), and <code>"faster"</code>.</p>
      <p class="not-prose">This gives you flexibility to adjust the opening and closing speed based on your design needs â€” whether you want a smooth, slow transition or a quick, snappy feel.</p>
      {#snippet example()}
        <Drawer animationSpeed="slower" label="Slower">
          <div class="p-8">
            Slower animation...
          </div>
        </Drawer>
        <Drawer animationSpeed="slow" label="Slow">
          <div class="p-8">
            Slower animation...
          </div>
        </Drawer>
        <Drawer animationSpeed="normal" label="Normal">
          <div class="p-8">
            Slower animation...
          </div>
        </Drawer>
        <Drawer animationSpeed="fast" label="Fast">
          <div class="p-8">
            Slower animation...
          </div>
        </Drawer>
        <Drawer animationSpeed="faster" label="Faster">
          <div class="p-8">
            Slower animation...
          </div>
        </Drawer>
        <Drawer animationSpeed="none" label="No animation">
          <div class="p-8">
            Slower animation...
          </div>
        </Drawer>
      {/snippet}

      {#snippet code()}
```html
<Drawer animationSpeed="slower" ...> ... </Drawer>
<Drawer animationSpeed="slow" ...> ... </Drawer>
<Drawer animationSpeed="normal" ...> ... </Drawer>
<Drawer animationSpeed="fast" ...> ... </Drawer>
<Drawer animationSpeed="faster" ...> ... </Drawer>
<Drawer animationSpeed="none" ...> ... </Drawer>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Accessibility">
    <div>
    <p class="not-prose">The <code>Drawer</code> component follows accessibility best practices:</p>
    <ul class="my-0">
      <li>The trigger element uses <span class="not-prose"><code>aria-controls</code>, <code>aria-expanded</code>, and <code>aria-label</code> to describe its relationship with the <b>Drawer</b></span>.</li>
      <li>Supports both text labels and custom elements, with keyboard interactions (<kbd>Enter</kbd>/<kbd>Space</kbd> key) for non-button triggers.</li>
      <li><span class="not-prose">The Drawer container uses <code>role="complementary"</code> and references the trigger using <code>aria-labelledby</code></span>.</li>
      <li><span class="not-prose"><code>aria-hidden</code></span> is used to hide the Drawer from assistive technologies when it's not active.</li>
      <li>The backdrop is marked with <span class="not-prose"><code>aria-hidden</code></span> to avoid it being announced by screen readers.</li>
      <li>A visible and accessible Close button is included for easy dismissal.</li>
    </ul>
    </div>
  </DocBlock>

  <DocBlock title="Configuration">
    <ConfigComponent {component} />
  </DocBlock>

  {#snippet sidebar()}
    <a href={processID("Example")}>Example</a>
    <a href={processID("Position")}>Position</a>
    <a href={processID("Outlying Trigger")}>Outlying trigger</a>
    <a href={processID("Backdrop")}>Backdrop</a>
    <a href={processID("Custom Backdrop Style")} class="ps-4">Custom style</a>
    <a href={processID("Preventing Backdrop Click")} class="ps-4">Preventing click</a>
    <a href={processID("Disable Backdrop")} class="ps-4">Disable Backdrop</a>
    <a href={processID("Animation Speed")}>Animation Speed</a>
    <a href={processID("Accessibility")}>Accessibility</a>
    <a href={processID("Configuration")}>Configuration</a>
  {/snippet}
</DocLayout>