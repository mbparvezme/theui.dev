---
title: List Group
dir: ".lib/pages"
description: Toggle content visibility in your Svelte app with TheUI-Svelte's Collapse component, offering a seamless user experience.
---

<script lang="ts">
  import DocLayout from "$lib/ui/doc/DocLayout.svelte";
  import DocHead from "$lib/ui/doc/Head.svelte";
  import DocBlock from "$lib/ui/doc/Block.svelte";
  import Code from "$lib/ui/doc/CodeBlock.svelte";
  import Example from "$lib/ui/doc/Example.svelte";
  import ListGroupConfig from "$lib/ui/doc/ConfigComponent.svelte";
  import ListItemConfig from "$lib/ui/doc/ConfigComponent.svelte";
  import { processID } from "$lib";
  let { component, edit_url }: {component: any, edit_url?: string } = $props();

  import { ListGroup, ListItem } from "theui-svelte";
</script>

<DocLayout>
  <DocHead title="List Group" text="The List Group component offers a flexible, customizable way to display items like links or text in a list format. It supports various styles and types, making it ideal for structured content." {edit_url}/>

  <DocBlock title="Example">
    <p class="not-prose">To use the List Group component, import it from the <code>theui-svelte</code> library. Below is a simple example demonstrating how to use the List Group:</p>
    <Example>
      {#snippet example()}
      <div>
        <ListGroup class="w-96">
          <ListItem>First Item</ListItem>
          <ListItem>Second Item</ListItem>
          <ListItem>Third Item</ListItem>
        </ListGroup>
      </div>
      {/snippet}

      {#snippet code()}
```html
<script>
  import { ListGroup, ListItem } from "theui-svelte";
</script>

<ListGroup>
  <ListItem>First Item</ListItem>
  <ListItem>Second Item</ListItem>
  <ListItem>Third Item</ListItem>
</ListGroup>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="List Style Variant">
    <p class="not-prose">The <code>variant</code> prop in the List Group component allows you to control the overall style of the list. It provides two options:</p>
    <ul class="my-0">
      <li><b>bordered</b>: This style adds borders around each list item, giving a defined and structured look to the list. It is useful when you want to visually separate items clearly.</li>
      <li><b>flat</b>: This style removes borders, resulting in a clean, minimalist design. It's ideal for cases where a simple and unobtrusive list presentation is preferred.</li>
    </ul>
    <p class="not-prose">By default, the <code>variant</code> is set to <code>"bordered"</code>. You can easily switch between these styles to match the design needs of your application.</p>
    <Example>
      {#snippet example()}
      <div>
        <ListGroup class="w-96" variant="flat">
          <ListItem>First Item</ListItem>
          <ListItem>Second Item</ListItem>
          <ListItem>Third Item</ListItem>
        </ListGroup>
      </div>
      {/snippet}

      {#snippet code()}
```html
<ListGroup variant="flat">
  <ListItem>First Item</ListItem>
  <ListItem>Second Item</ListItem>
  <ListItem>Third Item</ListItem>
</ListGroup>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="List Element Type">
    <p class="not-prose">The <code>type</code> prop in the List Group component determines the HTML element used to render the list. This allows you to customize the structure of the list based on your needs. The available options are:</p>
    <ul class="my-0">
      <li><b>ul</b> (default): Renders the list as an unordered list <span class="not-prose">(<code>&lt;ul&gt;</code>)</span>, which is ideal for general list items or navigation. <span class="not-prose">Each <code>ListItem</code> will be a <code>&lt;li&gt;</code></span> in that case.</li>
      <li><b>div</b>: <span class="not-prose">Setting <code>type="div"</code> renders each <code>ListItem</code> as a <code>&lt;div&gt;</code> by default. If the <code>ListItem</code> has an <code>href</code>, it becomes an <code>&lt;a&gt;</code>. Without <code>href</code>, it stays as a <code>&lt;div&gt;</code>. This allows a mix of static and clickable content.</span></li>
    </ul>
    <Example>
      {#snippet example()}
      <div>
        <ListGroup type="div">
          <ListItem content="Non-clickable item" type="div" />
          <ListItem content="Clickable link item" href="/link" />
        </ListGroup>
      </div>
      {/snippet}

      {#snippet code()}
```html
<ListGroup type="div">
  <ListItem>Non-clickable item</ListItem>
  <ListItem href="/link">Clickable link item</ListItem>
</ListGroup>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Accessibility">
    <div>
      <p class="not-prose">The List Group component ensures accessibility by using semantic HTML and ARIA roles:</p>
      <ol class="my-0">
        <li>The parent container <span class="not-prose"><code>&lt;ul&gt;</code></span> includes <span class="not-prose"><code>role="list"</code></span></li>
        <li>Each <span class="not-prose"><code>&lt;li&gt;</code></span> element has <span class="not-prose"><code>role="listitem"</code></span> to provide proper structure for assistive technologies.</li>
      </ol>
    </div>
    <div>
      <p class="not-prose">To maintain accessibility:</p>
      <ol class="my-0">
        <li>Ensure sufficient color contrast for readability.</li>
        <li>Interactive list items should be focusable and navigable using a keyboard.</li>
        <li>Add labels like `aria-label` if additional context is required for interactive elements.</li>
      </ol>
    </div>
  </DocBlock>

  <DocBlock title="Configuration">
    <ListGroupConfig title="List Group" component={component.listGroup} />
    <ListItemConfig title="List Item" component={component.listItem} />
  </DocBlock>

  {#snippet sidebar()}
    <a href={processID("Example")}>Example</a>
    <a href={processID("List Style Variant")}>List Style Variant</a>
    <a href={processID("List Element Type")}>List Element Type</a>
    <a href={processID("Accessibility")}>Accessibility</a>
    <a href={processID("Configuration")}>Configuration</a>
    <a class="ps-4" href={processID("List Group")}>List Group</a>
    <a class="ps-4" href={processID("List Item")}>List Item</a>
  {/snippet}
</DocLayout>