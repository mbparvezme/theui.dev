---
title: Tooltip
category: Components
description: Provide contextual information using informative tooltips in your Svelte app.
dir: ".lib/pages"
tags: [tooltip, info, popup, component, svelte, svelte-5, theui-svelte, component-library, ui, tailwindcss]
---

<script lang="ts">
  import DocLayout from "$lib/ui/doc/DocLayout.svelte";
  import DocHead from "$lib/ui/doc/Head.svelte";
  import DocBlock from "$lib/ui/doc/Block.svelte";
  import Code from "$lib/ui/doc/CodeBlock.svelte";
  import Example from "$lib/ui/doc/Example.svelte";
  import ConfigComponent from "$lib/ui/doc/ConfigComponent.svelte";
  import { processID, editURL } from "$lib";
  import { onMount } from "svelte";
  let { component }: {component: any } = $props();

  import { Tooltip, Button } from "theui-svelte";
</script>

<DocLayout>
  <DocHead title="Tooltip" text="The Tooltip component provides a way to display informative text when users hover over or click on an element." edit_url={editURL("tooltip")} />

  <DocBlock title="About">
    <p class="not-prose">The Tooltip component is a lightweight and customizable element that displays additional information when users interact with a target element. It enhances user experience by providing context or details without cluttering the interface.</p>
    <p class="not-prose">This component is highly flexible and supports various animations, colors, and positions. You can easily configure its behavior to appear on hover or click, making it suitable for a wide range of use cases. The Tooltip is designed to be accessible and visually appealing, with customizable animations and styles.</p>
  </DocBlock>

  <DocBlock title="Example">
    <Example title="Import & Initialize Tooltip" codeTitle="+layout.svelte">
      <p class="not-prose">To use the <code>Tooltip</code> component, first import it from theui-svelte. It’s recommended to initialize <code>Tooltip</code> globally, such as in <code>+layout.svelte</code>, to make tooltips available throughout your app. Alternatively, you can include it on specific pages where needed.</p>
      {#snippet code()}

```html
<script>
  import { Tooltip } from "theui-svelte";
</script>

<Tooltip />
```
      {/snippet}
    </Example>

    <Example title="Use with an Element">
      <p class="not-prose">Once initialized, the Tooltip component enables tooltips in your application. It works in the background, automatically handling hover interactions for elements with tooltip attributes.</p>
      {#snippet example()}
        <div>
          <Button data-tooltip="I'm tooltip!">Tooltip</Button>
        </div>
      {/snippet}
      {#snippet code()}

```html
<Button data-tooltip="I'm tooltip!">Open tooltip</Button>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Position">
    <p class="not-prose">The <b>Tooltip</b> component lets you control its position using the <code>position</code> prop or the <code>data-position</code> attribute. The <code>position</code> prop applies to all tooltips, while <code>data-position</code> affects only a specific trigger.</p>
    <p class="not-prose">By default, the tooltip is displayed at the top, but you can change it to <code>bottom</code>, <code>left</code>, or <code>right</code> as needed. For more precise control, you can use variations like <code>top-start</code>, <code>top-end</code>, <code>bottom-start</code>, <code>bottom-end</code>, <code>left-start</code>, <code>left-end</code>, <code>right-start</code>, and <code>right-end</code> to adjust alignment based on your design requirements.</p>
    <Example>
      {#snippet example()}
        <div>
          <Button data-tooltip="Hello! I'm a tooltip!<br>I am at the top-end corner!" data-tooltip-position="top-end">I'm a positional tooltip! Hover me!</Button>
        </div>
      {/snippet}
      {#snippet code()}

```html
<!-- Applied to all the Tooltip -->
<Tooltip position="top-end" />

<!-- Applied only to the Tooltip of the trigger -->
<Button data-tooltip-position="top-end" data-tooltip="...">...</Button>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Trigger Event">
    <Example>
      <p class="not-prose">You can control how the tooltip appears using the <code>triggerEvent</code> prop or the <code>data-tooltip-event</code> attribute on the trigger element.</p>
      <ul class="my-0">
        <li>The <span class="not-prose"><code>triggerEvent</code></span> prop applies the same event to all tooltips. By default, it is set to <span class="not-prose"><code>hover</code></span>, but you can change it to <span class="not-prose"><code>click</code></span> to trigger the tooltip on click instead.</li>
        <li>The <span class="not-prose"><code>data-tooltip-event</code></span> attribute allows setting the event for a specific tooltip without affecting others.</li>
      </ul>
      {#snippet example()}
        <Button data-tooltip="I'm tooltip!" data-tooltip-event="hover">Hover me</Button>
        <Button data-tooltip="I'm tooltip!" data-tooltip-event="click">Click me</Button>
      {/snippet}
      {#snippet code()}

```html
<Button data-tooltip="I'm tooltip!" data-tooltip-event="hover">Click me</Button>
<Button data-tooltip="I'm tooltip!" data-tooltip-event="click">Click me</Button>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Animation Speed">
    <Example>
      <p class="not-prose">You can control the tooltip's animation speed using the <code>animateSpeed</code> prop or the <code>data-tooltip-animateSpeed</code> attribute on the trigger element. Available values are <code>none</code>, <code>slower</code>, <code>slow</code>, <code>normal</code>, <code>fast</code> and <code>faster</code>.</p>
      <ul class="my-0">
        <li>The <span class="not-prose"><code>animateSpeed</code></span> prop applies the same animation speed to all tooltips.</li>
        <li>The <span class="not-prose"><code>data-tooltip-animateSpeed</code></span> attribute allows setting the animation speed for a specific tooltip without affecting others.</li>
      </ul>
      {#snippet example()}
        <Button data-tooltip="I'm tooltip!" data-tooltip-animateSpeed="none">Button</Button>
      {/snippet}
      {#snippet code()}

```html
<Button data-tooltip="I'm tooltip!" data-tooltip-animateSpeed="none">Button</Button>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Rounded Corner">
    <Example>
      <p class="not-prose">You can customize the tooltip’s border-radius using the <code>rounded</code> prop or the <code>data-tooltip-rounded</code> attribute on the trigger element. Available values are <code>sm</code>, <code>md</code>, <code>lg</code>, <code>xl</code>, <code>full</code> and <code>none</code>.</p>
      <ul class="my-0">
        <li>The <span class="not-prose"><code>rounded</code></span> prop applies the same corner style to all tooltips.</li>
        <li>The <span class="not-prose"><code>data-tooltip-rounded</code></span> attribute allows setting a different border-radius for specific tooltips without affecting others.</li>
      </ul>
      {#snippet example()}
        <Button data-tooltip="I'm tooltip!" data-tooltip-rounded="none">Button</Button>
      {/snippet}
      {#snippet code()}

```html
<Button data-tooltip="I'm tooltip!" data-tooltip-rounded="none">Button</Button>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Tooltip Gap">
    <Example>
      <p class="not-prose">You can adjust the spacing between the tooltip and its trigger using the <code>gap</code> prop or the <code>data-tooltip-gap</code> attribute on the trigger element. Default gap is <code>12</code>(px).</p>
      <ul class="my-0">
        <li>The <span class="not-prose"><code>gap</code></span> prop sets the spacing for all tooltips globally.</li>
        <li>The <span class="not-prose"><code>data-tooltip-gap</code></span> attribute allows setting the spacing for a specific tooltip without affecting others.</li>
      </ul>
      {#snippet example()}
        <Button data-tooltip="I'm tooltip!" data-tooltip-gap="20">Button</Button>
      {/snippet}
      {#snippet code()}

```html
<Button data-tooltip="I'm tooltip!" data-tooltip-gap="20">Button</Button>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Customization">
    <Example>
      <p class="not-prose">You can customize the Tooltip component using the class attribute on the tooltip itself or the data-tooltip-style attribute on the trigger element.</p>
      <ul class="my-0">
        <li>The <span class="not-prose"><code>class</code></span> attribute applied directly to the Tooltip component will be applied to <b>all tooltips</b>.</li>
        <li>The <span class="not-prose"><code>data-tooltip-style</code></span> attribute, when added to a trigger, will style only the tooltip associated with that specific trigger.</li>
      </ul>
      {#snippet example()}
        <Button data-tooltip="I'm tooltip!" data-tooltip-style="bg-emerald-600 text-emerald-100">Button</Button>
      {/snippet}
      {#snippet code()}

```html
<Button data-tooltip="I'm tooltip!" data-tooltip-style="bg-emerald-600 text-emerald-100">Button</Button>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Accessibility">
    <div>
      <p class="not-prose">Ensuring tooltips are accessible improves usability for all users, including those using keyboards and screen readers. Below are key accessibility considerations for the Tooltip component:</p>
      <ol class="my-0">
        <li>
          <b>Keyboard Navigation</b>
          <ul class="my-0">
            <li>Users can open and close the tooltip using the <kbd>Space</kbd> or <kbd>Enter</kbd> keys when <span class="not-prose"><code>triggerEvent="click"</code></span>.</li>
            <li>Pressing <kbd>Escape</kbd> closes the tooltip when it is open when <span class="not-prose"><code>triggerEvent="click"</code></span>.</li>
            <li>The tooltips triggered by hover are also accessible via focus for keyboard users.</li>
          </ul>
        </li>
        <li>
          <b>ARIA Attributes</b>
          <p class="not-prose">To enhance screen reader compatibility, the tooltip automatically includes essential ARIA attributes:</p>
          <ul class="my-0">
            <li>The <span class="not-prose"><code>aria-controls</code></span> links the trigger element to the tooltip container.</li>
            <li>The <span class="not-prose"><code>aria-haspopup</code></span> on the trigger element to indicate a tooltip is available.</li>
          </ul>
        </li>
        <li>
          <b>Focus Management</b>
          <ul class="my-0">
            <li>When opened, focus remains on the trigger or shifts inside the tooltip for better navigation.</li>
            <li>When closed, focus returns to the trigger element to maintain a logical navigation flow.</li>
          </ul>
        </li>
      </ol>
    </div>
  </DocBlock>

  <DocBlock title="Configuration">
    <ConfigComponent component={component} />
  </DocBlock>

  {#snippet sidebar()}
    <a href={processID("About")}>About</a>
    <a href={processID("Example")}>Example</a>
    <a href={processID("Position")}>Position</a>
    <a href={processID("Trigger Event")}>Trigger Event</a>
    <a href={processID("Animation Speed")}>Animation Speed</a>
    <a href={processID("Rounded Corner")}>Rounded Corner</a>
    <a href={processID("Customization")}>Customization</a>
    <a href={processID("Tooltip Gap")}>Tooltip Gap</a>
    <a href={processID("Accessibility")}>Accessibility</a>
    <a href={processID("Configuration")}>Configuration</a>
  {/snippet}
</DocLayout>