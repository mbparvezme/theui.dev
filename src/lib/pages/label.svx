---
title: Label
dir: ".lib/pages"
description: A reusable component for rendering form labels, ensuring consistent styling and behavior across all inputs. It supports both string and snippet-based labels and integrates seamlessly with the Form input components.
---

<script lang="ts">
  import DocLayout from "$lib/ui/doc/DocLayout.svelte";
  import DocHead from "$lib/ui/doc/Head.svelte";
  import DocBlock from "$lib/ui/doc/Block.svelte";
  import Code from "$lib/ui/doc/CodeBlock.svelte";
  import Example from "$lib/ui/doc/Example.svelte";
  import ConfigComponent from "$lib/ui/doc/ConfigComponent.svelte";
  import { processID } from "$lib";
  let { component, edit_url }: {component: any, edit_url?: string } = $props();

  import { Label } from "theui-svelte";
</script>

<DocLayout>
  <DocHead title="Label" text="A reusable component for rendering form labels, ensuring consistent styling and behavior across all inputs. It supports both string and snippet-based labels and integrates seamlessly with the Form component." {edit_url}/>

  <DocBlock title="About">
    <p class="not-prose">The <code>Label</code> component is designed to simplify the creation of form labels while maintaining consistency in styling and functionality. The component supports both plain text labels (as strings) and dynamic labels (as Svelte snippets), making it flexible for various use cases.</p>
  </DocBlock>

  <DocBlock title="Example">
    <Example>
      <p class="not-prose">To use the <b>Label</b> component, import it and pass the <code>label</code> and <code>id</code> props. Here's a basic example:</p>
      {#snippet code()}

```html
<script>
  import { Label } from "theui-svelte";
</script>

<Label label="Username" id="username" />
```
      {/snippet}
    </Example>
    <p class="not-prose">In this example, a label with the text "Username" is rendered and associated with an input field using the <code>id</code> prop. The label will inherit styling and behavior from the parent Form component (if used).</p>
  </DocBlock>

  <DocBlock title="Label Content">
    <Example>
      <p class="not-prose">The <code>label</code> prop defines the content of the label. It supports both <b>string</b> and <b>Snippet</b> types, making it flexible for static or dynamic label content. If the <code>label</code> is a <b>string</b>, it is rendered as plain text or HTML. If the <code>label</code> is a <b>Snippet</b>, it is rendered dynamically, allowing for custom components or complex HTML structures.</p>
      {#snippet code()}

```html
<!-- String label -->
<Label label="Username" id="username" />
<!-- HTML label -->
<Label label="<strong>Email</strong> Address" id="email" />
<!-- Snippet label -->
<Label id="email">
  <!-- Custom elements for the Label snippet-->
</Label>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Customization">
    <Example>
      <p class="not-prose">The <code>Label</code> component can be easily customized using the native <code>class</code> attribute. By adding your own CSS classes or the <b>TailwindCSS</b>, you can override or extend the default styles of the label to match your design requirements.</p>
      {#snippet code()}

```html
<Label label="Username" id="username" class="text-brand-primary-500 font-bold text-lg" />
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Configuration">
    <ConfigComponent {component} />
  </DocBlock>

  {#snippet sidebar()}
    <a href={processID("About")}>About</a>
    <a href={processID("Example")}>Example</a>
    <a href={processID("Label Content")}>Label Content</a>
    <a href={processID("Customization")}>Customization</a>
    <a href={processID("Configuration")}>Configuration</a>
  {/snippet}


</DocLayout>