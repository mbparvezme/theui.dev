---
title: Helper Text
dir: ".lib/pages"
description: A lightweight component designed to provide additional context or guidance for form inputs, such as descriptions, hints, or error messages. It supports both plain text and dynamic content for flexibility.
---

<script lang="ts">
  import DocLayout from "$lib/ui/doc/DocLayout.svelte";
  import DocHead from "$lib/ui/doc/Head.svelte";
  import DocBlock from "$lib/ui/doc/Block.svelte";
  import Code from "$lib/ui/doc/CodeBlock.svelte";
  import Example from "$lib/ui/doc/Example.svelte";
  import ConfigComponent from "$lib/ui/doc/ConfigComponent.svelte";
  import { processID } from "$lib";
  let { component, edit_url }: {component: any, edit_url?: string } = $props();
</script>

<DocLayout>
  <DocHead title="Helper Text" text="A lightweight component designed to provide additional context or guidance for form inputs, such as descriptions, hints, or error messages. It supports both plain text and dynamic content for flexibility." {edit_url}/>

  <DocBlock title="About">
    <p class="not-prose">The <code>Helper</code> component is used to display supplementary information related to form inputs, such as instructions, hints, or validation messages. It is highly customizable and works seamlessly alongside inputs, labels, and other form elements. The component supports both static text and dynamic content (via Svelte snippets), making it versatile for various use cases.</p>
  </DocBlock>

  <DocBlock title="Example">
    <Example>
      <p class="not-prose">To use the <b>Helper</b> component, pass the content prop with the desired text or snippet. Here's a basic example:</p>
      {#snippet code()}

```html
<script>
  import { Helper } from "theui-svelte";
</script>

<Helper content="Please enter your full name." />
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Helper Text Content">
    <p class="not-prose">The <code>content</code> prop defines the text or snippet to be displayed as helper text.</p>
    <Example>
      <p class="not-prose">It supports both strings and Snippets for static or dynamic content. Strings render as text or HTML, while Snippets allow custom components or HTML. This makes the Helper component flexible for hints, messages, or interactive content.</p>
      {#snippet code()}

```html
<!-- Helper text as plain string -->
<Helper content="Passwords must be at least 8 characters long." />
<!-- Helper text as HTML string -->
<Helper content="<strong>Note:</strong> This field is required." />
<!-- Helper text as Snippet -->
<Helper>
  <!-- Custom elements for the content snippet-->
</Helper>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Customization">
    <Example>
      <p class="not-prose">The <code>Helper</code> component can be customized using the <code>class</code> attribute to apply additional styles or override default ones.</p>
      {#snippet code()}

```html
<Helper content="..." class="text-blue-600 italic" />
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Accessibility">
    <p class="not-prose"><code>HelperText</code> gives users additional guidance without distraction. It's screen reader-friendly through <code>aria-describedby</code>, and styled to stay secondary in visual hierarchy. It accepts both plain text and render functions for flexibility.</p>
  </DocBlock>

  <DocBlock title="Configuration">
    <ConfigComponent {component} />
  </DocBlock>

  {#snippet sidebar()}
    <a href={processID("About")}>About</a>
    <a href={processID("Example")}>Example</a>
    <a href={processID("Helper Text Content")}>Helper Text Content</a>
    <a href={processID("Customization")}>Customization</a>
    <a href={processID("Accessibility")}>Accessibility</a>
    <a href={processID("Configuration")}>Configuration</a>
  {/snippet}


</DocLayout>