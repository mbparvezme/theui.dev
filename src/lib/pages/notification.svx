---
title: Notification
dir: ".lib/pages"
description: Deliver user notifications effectively in your Svelte app with theui-svelte's Notification component, supporting various alert styles.
---

<script lang="ts">
  import DocLayout from "$lib/ui/doc/DocLayout.svelte";
  import DocHead from "$lib/ui/doc/Head.svelte";
  import DocBlock from "$lib/ui/doc/Block.svelte";
  import Code from "$lib/ui/doc/CodeBlock.svelte";
  import Example from "$lib/ui/doc/Example.svelte";
  import ConfigComponent from "$lib/ui/doc/ConfigComponent.svelte";
  import { processID, editURL } from "$lib";
  let { component }: {component: any } = $props();

  import { Notification, notify, Button } from "theui-svelte"
</script>

<Notification />

<DocLayout>
  <DocHead title="Notification" text="A lightweight way to display temporary messages without interrupting the user experience. It appears briefly, disappears automatically, and is fully customizable." edit_url={editURL("notification")} />

  <DocBlock title="About">
    <p class="not-prose">This component is ideal for showing temporary messages such as success alerts, error messages, or status updates. It supports customization options, including different colors, positions, icons, and auto-dismiss settings. Whether you need to notify users about form submissions, system errors, or background processes, the Notification (Toast) component offers a flexible and efficient solution.</p>
  </DocBlock>

  <DocBlock title="Example">
    <p class="not-prose">To use the <code>Notification</code> component, you need to add it once in your application. The recommended place is <code>+layout.svelte</code> to ensure it is available throughout your app, but you can place it anywhere suitable.</p>
    <Example codeTitle="+layout.svelte">
      {#snippet code()}

```html

<script>
  import { Notification } from "theui-svelte";
</script>

<!-- Add Notification component once, ideally in +layout.svelte -->
<Notification />
```
      {/snippet}
    </Example>
    <p class="not-prose">Once added, you can trigger notifications anywhere in your app using the <code>notify</code> function.</p>
    <Example codeTitle="routes/any/path/+page.svelte">
      {#snippet example()}
        <iframe src="/example/notification-example" style="width: 100%; height: 210px; overflow:scroll" scrolling="no"></iframe>
      {/snippet}

      {#snippet code()}
```html
<script>
  import { notify } from "theui-svelte";
</script>

<!-- Trigger the notifications -->
<Button
  onclick={
    () => notify("Hello world!")
  }
>Notify</Button>
```
      {/snippet}
    </Example>
    <p class="not-prose">This will display a simple notification with the message <b>"Hello world!"</b>.</p>
  </DocBlock>

  <DocBlock title="Notification Position">
    <p class="not-prose">By default the notification will appears at the top-end corner of the display. But you can change it using the <code>position</code> prop in the <code>Notification</code> component. The available value of the position prop are <code>"top-end"</code>, <code>"top-center"</code>, <code>"top-start"</code>, <code>"bottom-end"</code>, <code>"bottom-center"</code>, and <code>"bottom-start"</code>. Default value is <code>"top-end"</code>.</p>
    <Example>
      {#snippet example()}
        <iframe src="/example/notification-position" style="width: 100%; height: 210px;" scrolling="no"></iframe>
      {/snippet}
      {#snippet code()}

```html
<Notification position="bottom-end" />
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Notification Type">
    <p class="not-prose">The <code>notify</code> function accept some parameters along with the message. You have to pass the message as the first parameter. The second parameter defines the type of the notification. Basically it changes the color based on the type. The available types are <code>"error"</code>, <code>"info"</code>, <code>"success"</code>, and <code>"warning"</code>. The default value is <code>"error"</code>.</p>
    <Example>
      {#snippet example()}
        <iframe src="/example/notification-type" style="width: 100%; height: 260px;" scrolling="no"></iframe>
      {/snippet}
      {#snippet code()}

```js
notify("Hello world!", "success") // You can replace "success" with any message type!
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Notification Theme">
    <p class="not-prose">You can control the background color of the notifications with the <code>theme</code> prop. It supports three options: <code>'default'</code>, <code>'soft'</code>, and <code>'gradient'</code>. The <code>'default'</code> theme follows the standard notification styling, the <code>'soft'</code> theme provides a softer color palette for a more subtle look, and the <code>'gradient'</code> theme introduces a bold, eye-catching background with smooth color transitions.</p>

    <div>
      <Example title="Soft Theme">
        <p class="not-prose">With the <code>'soft'</code> theme, notifications adopt a gentle color scheme, making them blend seamlessly into minimalistic interfaces.</p>
        {#snippet example()}
          <iframe src="/example/notification-theme-soft" style="width: 100%; height: 260px;" scrolling="no"></iframe>
        {/snippet}
        {#snippet code()}

```js
notify( "Hello world!", "success", {theme: "soft"} )
```
        {/snippet}
      </Example>
      <Example title="Gradient Theme">
        <p class="not-prose">The <code>'gradient'</code> theme applies a lively blend of colors, giving notifications a more modern and attention-grabbing style.</p>
        {#snippet example()}
          <iframe src="/example/notification-theme-gradient" style="width: 100%; height: 260px;" scrolling="no"></iframe>
        {/snippet}
        {#snippet code()}

```js
notify( "Hello world!", "success", {theme: "gradient"} )
```
        {/snippet}
      </Example>
    </div>
  </DocBlock>

  <DocBlock title="Notification Variant">
    <p class="not-prose">The <code>'variant'</code> property allows you to change the visual style of the notification while keeping it minimal. There are four available variants: <code>'card'</code>, <code>'barTop'</code>, <code>'barBottom'</code>, and <code>'barStart'</code>.</p>
    <p class="not-prose">The default variant, <code>'card'</code>, follows a standard notification style without extra elements. The other three variants — <code>'barTop'</code>, <code>'barBottom'</code>, and <code>'barStart'</code> — add a thin line to the respective side of the notification. This subtle design change helps visually distinguish notifications without making them too complex.</p>
    <p class="not-prose">For example, using <code>barTop</code> will place a small line at the top of the notification, while <code>barBottom</code> and <code>barStart</code> will do the same for the bottom and start (left in LTR layouts, right in RTL layouts).</p>
    <Example>
      {#snippet example()}
        <iframe src="/example/notification-variant" style="width: 100%; height: 260px;" scrolling="no"></iframe>
      {/snippet}
      {#snippet code()}

```js
notify("Hello world!", "success", {theme: "soft", variant: "borderTop"})
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Notification Duration">
    <Example>
      <p class="not-prose">The <code>removeAfter</code> property controls how long a notification remains visible before closing automatically. It accepts an integer value in milliseconds, starting from 0.</p>
      <ul class="my-0">
        <li>The <b>default duration is 5000ms</b> (5 seconds), meaning notifications disappear after this time.</li>
        <li>Setting it to <b>0</b> keeps the notification open indefinitely until manually closed.</li>
      </ul>
      {#snippet example()}
        <iframe src="/example/notification-duration" style="width: 100%; height: 260px;" scrolling="no"></iframe>
      {/snippet}
      {#snippet code()}

```js
notify("Hello world!", "error", {removeAfter: 3000})
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Remove On Click">
    <p class="not-prose">By default, notifications close when clicked. You can change this behavior using the <code>removeOnClick</code> property in the options object. When set to <code>true</code> (default), clicking the notification will dismiss it. If set to <code>false</code>, the notification will remain visible even when clicked.</p>
    <Example>
      {#snippet example()}
        <iframe src="/example/notification-click" style="width: 100%; height: 260px;" scrolling="no"></iframe>
      {/snippet}
      {#snippet code()}

```js
notify("Hello world!", "error", {removeOnClick: false})
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock id={processID("notify-function", false)} title="notify() Function">
    <p class="not-prose">The <code>notify</code> function displays notifications with customizable options. It accepts three parameters:</p>
    <ul class="my-0">
      <li><strong>msg</strong> (type string) – The message displayed in the notification.</li>
      <li><span class="not-prose"><strong>type</strong> (type <a href="/docs/types#notification-types"><u class="decoration-wavy decoration-1 underline-offset-1">NOTIFICATION_TYPE</u></a>) – Defines the notification style. Options: <code>'error'</code>, <code>'info'</code>, <code>'success'</code>, and <code>'warning'</code>.<br>- Default is <code>'error'</code>.</span></li>
      <li><span class="not-prose"><strong>config</strong> (type <a href="/docs/types#notification-configuration"><u class="decoration-wavy decoration-1 underline-offset-1">NOTIFY_CONFIG</u></a>) – An optional object to configure the notification’s behavior and appearance.</span></li>
    </ul>
    <div>
      <h4 class="my-0">Configuration Options</h4>
      <ul class="my-0">
        <li><span class="not-prose"><strong>removeAfter</strong> (type number) – Duration in milliseconds before the notification disappears. Set to <code>0</code> for persistent notifications.<br>- Default is <code>5000</code>.</span></li>
        <li><span class="not-prose"><strong>removeOnClick</strong> (type boolean) – Determines if the notification should close when clicked.<br>- Default is <code>true</code>.</span></li>
        <li><span class="not-prose"><strong>rounded</strong> (type <a href="/docs/types#common-types"><u class="decoration-wavy decoration-1 underline-offset-1">ROUNDED</u></a>) – Controls the border radius.<br>- Default is <code>'md'</code>.</span></li>
        <li><span class="not-prose"><strong>theme</strong> (type string) – Sets the notification theme. Options: <code>'default'</code>, <code>'soft'</code>, <code>'gradient'</code>.<br>- Default is <code>'default'</code>.</span></li>
        <li><span class="not-prose"><strong>variant</strong> (type string) – Defines the notification style. Options: <code>'card'</code>, <code>'barTop'</code>, <code>'barBottom'</code>, <code>'barStart'</code>.<br>- Default is <code>'card'</code>.</span></li>
      </ul>
    </div>
  </DocBlock>

  <DocBlock title="Accessibility">
    <p class="not-prose">The Alert component is built with accessibility in mind, handling all necessary ARIA attributes, including <code>role="alert"</code> and <code>aria-label="Close alert"</code>, to ensure compatibility with assistive technologies. These attributes are automatically applied, so you don't need to configure them manually.</p>
    <p class="not-prose font-bold">The only consideration required is maintaining proper color contrast for the alert's text and background to ensure readability and compliance with accessibility standards.</p>
  </DocBlock>

  <DocBlock title="Configuration">
    <ConfigComponent {component} />
  </DocBlock>

  {#snippet sidebar()}
    <a href={processID("About")}>About</a>
    <a href={processID("Example")}>Example</a>
    <a href={processID("Notification Position")}>Position</a>
    <a href={processID("Notification Type")}>Notification type</a>
    <a href={processID("Notification Theme")}>Theme</a>
    <a href={processID("Soft Theme")} class="ps-4">Soft color theme</a>
    <a href={processID("Gradient Theme")} class="ps-4">Gradient theme</a>
    <a href={processID("Notification Variant")}>Variant</a>
    <a href={processID("Notification Duration")}>Duration</a>
    <a href={processID("Remove On Click")}>Remove on click</a>
    <a href={processID("Customization")}>Customization</a>
    <a href={processID("notify-function")}>notify() function</a>
    <a href={processID("Accessibility")}>Accessibility</a>
    <a href={processID("Configuration")}>Configuration</a>
  {/snippet}

</DocLayout>