---
title: Quick Action Button - QAB
dir: ".lib/pages"
description: 
---

<script lang="ts">
  import DocLayout from "$lib/ui/doc/DocLayout.svelte";
  import DocHead from "$lib/ui/doc/Head.svelte";
  import DocBlock from "$lib/ui/doc/Block.svelte";
  import Code from "$lib/ui/doc/CodeBlock.svelte";
  import Example from "$lib/ui/doc/Example.svelte";
  import QABComponent from "$lib/ui/doc/ConfigComponent.svelte";
  import QABItemComponent from "$lib/ui/doc/ConfigComponent.svelte";
  import { processID } from "$lib";
  let { component, edit_url }: {component: any, edit_url?: string } = $props();

  import { Qab, QabItem, Svg, Alert, Tabs, Tab, TabPanel } from "theui-svelte";
</script>

<DocLayout>
  <DocHead title="Quick Action Button" text="The Quick Action Button (QAB) is a small but important button designed to provide fast and easy access to key actions. It helps users quickly perform important tasks without navigating through multiple menus." {edit_url}/>

  <DocBlock title="About">
    <p class="not-prose">The Quick Action Button (QAB) is designed to offer users quick and easy access to important actions or features. Positioned prominently, it enhances user engagement and streamlines workflows. The QAB supports various styles and configurations, making it a versatile and essential component for improving efficiency and user experience.</p>
  </DocBlock>

  <DocBlock title="Example">
      <p class="not-prose">To use the Quick Action Button (QAB) in your Svelte application, you need to import both the <code>Qab</code> container and the <code>QabItem</code> component from the theui-svelte package:</p>
    <Example>
      {#snippet example()}
        <iframe src="/example/qab-example" style="width: 100%; height: 210px;" scrolling="no"></iframe>
      {/snippet}
      {#snippet code()}

```html
<script>
  import { Qab, QabItem } from "theui-svelte";
</script>

<Qab>
  <QabItem>Link 1</QabItem>
  <QabItem>Link 2</QabItem>
  <QabItem>Link 3</QabItem>
</Qab>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Link">
    <p class="not-prose">The <code>href</code> prop allows the main Quick Action Button (QAB) to function as a link. When this prop is set, the button will navigate to the specified URL when clicked.</p>
    <Example>
      {#snippet example()}
        <iframe src="/example/qab-link" style="width: 100%; height: 210px;" scrolling="no"></iframe>
      {/snippet}
      {#snippet code()}

```html
<Qab href="/about" />
```
      {/snippet}
    </Example>
    <p class="not-prose">In this example, clicking the main button will take the user to the <code>/about</code> page. This prop makes it easy to turn the QAB into a navigational link while still maintaining its quick action functionality.</p>
  </DocBlock>

  <DocBlock title="Alignment">
      <p class="not-prose">The <code>align</code> prop controls the horizontal alignment of the Quick Action Button (QAB) container. You can set it to either <code>'start'</code> or <code>'end'</code>, with the default value being <code>'end'</code>.</p>
      <p class="not-prose"> By setting the <code>align</code> prop, you can easily control the horizontal position of the buttons within the container.</p>
    <Example>
      {#snippet example()}
        <iframe src="/example/qab-align" style="width: 100%; height: 210px;" scrolling="no"></iframe>
      {/snippet}
      {#snippet code()}

```html
<Qab align="end"> ... </Qab>
<Qab align="start"> ... </Qab>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Sizes">
    <Example>
      <p class="not-prose">The <code>size</code> prop lets you control how big the Quick Action Button (QAB) is. You can set it to <code>'sm'</code> for small, <code>'md'</code> for medium (which is the default), <code>'lg'</code> for large, or <code>'xl'</code> for extra large.</p>
      {#snippet example()}
        <iframe src="/example/qab-size" style="width: 100%; height: 240px;" scrolling="no"></iframe>
      {/snippet}
      {#snippet code()}

```html
<Qab size="sm"> ... </Qab>
<Qab size="md"> ... </Qab> <!-- Default -->
<Qab size="lg"> ... </Qab>
<Qab size="xl"> ... </Qab>
```
      {/snippet}
    </Example>
    <p class="not-prose">By changing the <code>size</code> prop, you can easily adjust the button's size to match your needs.</p>
  </DocBlock>

  <DocBlock title="Direction">
    <Example>
      <p class="not-prose">The <code>direction</code> prop determines how the Quick Action Buttons (QAB) are arranged. You can set it to <code>'horizontal'</code> to place the buttons side by side, or <code>'vertical'</code> to stack them on top of each other. The default value is <code>'vertical'</code>.</p>
      {#snippet example()}
        <iframe src="/example/qab-direction" style="width: 100%; height: 210px;" scrolling="no"></iframe>
      {/snippet}
      {#snippet code()}

```html
<Qab direction="horizontal"> ... </Qab>
<Qab direction="vertical"> ... </Qab> <!-- Default -->
```
      {/snippet}
    </Example>
    <p class="not-prose">By changing the <code>direction</code> prop, you can control whether the buttons are displayed in a row or a column, depending on your design needs.</p>
  </DocBlock>

  <DocBlock title="QAB Color">
    <p class="not-prose">The <code>color</code> prop customizes the QAB button's appearance by applying predefined color themes. These themes correspond to various statuses or actions, ensuring consistent visual design throughout your application. The available color options are <code>"brand"</code>, <code>"error"</code>, <code>"info"</code>, <code>"success"</code>, and <code>"warning"</code>. The default value is <code>"brand"</code>.</p>
    <Tabs variant="tabs">
      {#snippet tabList()}
        <Tab>QAB Main Button</Tab>
        <Tab>QAB Item Color</Tab>
      {/snippet}
      {#snippet tabPanel()}
        <TabPanel>
          <Example>
            {#snippet example()}
              <iframe src="/example/qab-color" style="width: 100%; height: 210px;" scrolling="no"></iframe>
            {/snippet}
            {#snippet code()}

  ```html
  <Qab color="info"> ... </Qab>
  ```
            {/snippet}
          </Example>
        </TabPanel>
        <TabPanel>
          <Example>
            {#snippet example()}
              <iframe src="/example/qab-color-item" style="width: 100%; height: 260px;" scrolling="no"></iframe>
            {/snippet}
            {#snippet code()}

  ```html
<Qab>
  <QabItem color="success">1</QabItem>
  <QabItem color="error">2</QabItem>
  <QabItem color="warning">3</QabItem>
</Qab>
  ```
            {/snippet}
          </Example>
        </TabPanel>
      {/snippet}
    </Tabs>
    <p class="not-prose">Each color serves a purpose, making design intuitive and user-friendly. While you can customize colors with the class attribute, the <code>color</code> prop offers a quick and consistent solution.</p>
  </DocBlock>

  <DocBlock title="Theme">
    <p class="not-prose">The <code>theme</code> prop determines the overall style and background of the button. It accepts three values: <code>'default'</code>, <code>'light'</code>, and <code>'gradient'</code>. The default theme applies the standard button styles, while the light theme uses lighter versions of the default colors for a softer look. The gradient theme gives a more vibrant feel by applying gradient backgrounds to the button.</p>

    <Example title="Light Theme">
      <p class="not-prose">The light theme is a softer variation of the default button colors, making it suitable for more subtle designs.</p>
      <Tabs variant="tabs">
        {#snippet tabList()}
          <Tab>QAB Main Button</Tab>
          <Tab>QAB Item Color</Tab>
        {/snippet}
        {#snippet tabPanel()}
          <TabPanel>
            <Example>
              {#snippet example()}
                <iframe src="/example/qab-light" style="width: 100%; height: 210px;" scrolling="no"></iframe>
              {/snippet}
              {#snippet code()}

```html
<Qab theme="light" color="info"> ... </Qab>
```
              {/snippet}
            </Example>
          </TabPanel>
          <TabPanel>
            <Example>
              {#snippet example()}
                <iframe src="/example/qab-light-item" style="width: 100%; height: 260px;" scrolling="no"></iframe>
              {/snippet}
              {#snippet code()}

```html
<Qab>
  <QabItem theme="light" color="success">1</QabItem>
  <QabItem theme="light" color="info">2</QabItem>
  <QabItem theme="light" color="error">3</QabItem>
</Qab>
```
              {/snippet}
            </Example>
          </TabPanel>
        {/snippet}
      </Tabs>
    </Example>

    <Example title="Gradient Theme">
      <p class="not-prose">The gradient theme applies vibrant gradient colors to the button background, providing a more modern and eye-catching look.</p>
      <Tabs variant="tabs">
        {#snippet tabList()}
          <Tab>QAB Main Button</Tab>
          <Tab>QAB Item Color</Tab>
        {/snippet}
        {#snippet tabPanel()}
          <TabPanel>
            <Example>
              {#snippet example()}
                <iframe src="/example/qab-gradient" style="width: 100%; height: 210px;" scrolling="no"></iframe>
              {/snippet}
              {#snippet code()}

```html
<Qab theme="gradient" gradientColor="success"> ... </Qab>
```
              {/snippet}
            </Example>
          </TabPanel>
          <TabPanel>
            <Example>
              {#snippet example()}
                <iframe src="/example/qab-gradient-item" style="width: 100%; height: 260px;" scrolling="no"></iframe>
              {/snippet}
              {#snippet code()}

```html
<Qab>
  <QabItem theme="light" color="success">1</QabItem>
  <QabItem theme="light" color="info">2</QabItem>
  <QabItem theme="light" color="error">3</QabItem>
</Qab>
```
              {/snippet}
            </Example>
          </TabPanel>
        {/snippet}
      </Tabs>
    </Example>
    <Alert type="warning" theme="light" variant="borderStart">The color prop can still be used with each theme to specify the button's color, allowing flexibility while maintaining consistency across different button themes.</Alert>
  </DocBlock>

  <DocBlock title="QAB Trigger Event">
    <Example>
      <p class="not-prose">The <code>triggerEvent</code> prop controls how the Quick Action Button (QAB) is activated. You can choose <code>"click"</code> to make the button activate when the user clicks on it, or <code>"hover"</code> to activate it when the user moves their mouse over it. By default, it is set to <code>"click"</code>.</p>
      {#snippet example()}
        <iframe src="/example/qab-trigger" style="width: 100%; height: 210px;" scrolling="no"></iframe>
      {/snippet}
      {#snippet code()}

```html
<Qab triggerEvent="hover"> ... </Qab>
<Qab triggerEvent="click"> ... </Qab> <!-- Default -->
```
      {/snippet}
    </Example>
    <p class="not-prose">This prop helps you decide how users interact with the QAB, making it more flexible to fit different user experiences.</p>
  </DocBlock>

  <DocBlock title="Rounded Button">
    <Example>
      <p class="not-prose">The <code>rounded</code> prop adjusts how rounded the corners of the Quick Action Buttons (QAB) are. You can choose from different levels such as <code>"sm"</code> for slightly rounded corners, <code>"md"</code> for medium rounding (default), <code>"lg"</code> or <code>"xl"</code> for more rounded edges, <code>"full"</code> for fully circular buttons, or <code>"none"</code> to keep the corners sharp.</p>
      {#snippet example()}
        <iframe src="/example/qab-rounded" style="width: 100%; height: 210px;" scrolling="no"></iframe>
      {/snippet}
      {#snippet code()}

```html
<Qab rounded="none"> ... </Qab>
<Qab rounded="md"> ... </Qab> <!-- Default -->
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Animation Speed">
    <Example>
      <p class="not-prose">The <code>animationSpeed</code> prop controls how fast the Quick Action Button (QAB) animations run. You can set it to values like <code>"none"</code> for no animation, <code>"slower"</code> or <code>"slow"</code> for a more gradual effect, <code>"normal"</code> for the default speed, or <code>"fast"</code> and <code>"faster"</code> for quicker animations. The default setting is <code>"normal"</code>.</p>
      {#snippet example()}
        <iframe src="/example/qab-animate" style="width: 100%; height: 210px;" scrolling="no"></iframe>
      {/snippet}
      {#snippet code()}

```html
<Qab animationSpeed="slower"> ... </Qab>
<Qab animationSpeed="fast"> ... </Qab> <!-- Default -->
```
      {/snippet}
    </Example>
    <p class="not-prose">These props allow you to customize the button's animation speed and corner style to better match your design needs.</p>
  </DocBlock>

  <DocBlock title="Customization">
    <p class="not-prose">There are various way to customize the QAB button and QAB items. You can use <code>theme</code>, <code>color</code>, and <code>gradientColor</code> prop to customize the color showing above.</p>
    <Example title="Main Button Customization">
      <p class="not-prose">You can apply custom classes to customize the main QAB button with the <code>class</code> attribute. Also, to change the icon of the main QAB button, just use <code>icon</code> snippet.</p>
      {#snippet example()}
        <iframe src="/example/qab-customize-main" style="width: 100%; height: 210px;" scrolling="no"></iframe>
      {/snippet}
      {#snippet code()}

```html
<Qab class="border-4 border-brand-primary-200">
  {#snippet icon()}
  <Svg class="w-6 h-6">
    <path d="M2 1a1 1 0 0 ... 2 0 0 1 2-2z"/>
  </Svg>
  {/snippet}
</Qab>
```
      {/snippet}
    </Example>
    <Example title="Item Customization">
      <p class="not-prose">Use <code>class</code> attribute to apply custom classes to the QAB items. To change the icon write it inside the  <code>QabItem</code> component.</p>
      <p class="not-prose">Again, if you want to apply some common classes to all the QAB item's icon, you can use <code>iconClasses</code> on the <code>Qab</code> component.</p>
      {#snippet example()}
        <iframe src="/example/qab-customize-item" style="width: 100%; height: 210px;" scrolling="no"></iframe>
      {/snippet}
      {#snippet code()}

```html

<Qab iconClasses="text-yellow-300">
    <Svg>
      <path d="M8 1a5 5 0 0 ... 0 0 1 1-1h1V6a5 5 0 0 0-5-5"/>
    </Svg>
  <QabItem class="border-4 border-brand-primary-200">
    <Svg>
      <path d="M13.601 2.326A7 0 ... 943-.049-.084-.182-.133-.38-.232"/>
    </Svg>
  </QabItem>
  <QabItem class="border-4 border-brand-primary-200">
    <Svg>
      <path d="M3.654 1.328a 0 0 ... .362-1.03-.037-2.137.703-2.877z"/>
    </Svg>
  </QabItem>
</Qab>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Accessibility">
    <p class="not-prose">The Quick Action Button (QAB) component includes built-in support for accessibility, ensuring a better experience for all users.</p>
    <Example title="ARIA Labels">
      <p class="not-prose">The <code>ariaLabel</code> prop allows you to provide an accessible name for the QAB button, ensuring screen readers can describe its function clearly.</p>
      {#snippet code()}

```html
<Qab ariaLabel="Open quick actions"> ... </Qab>
```
      {/snippet}
    </Example>
    <Example title="Keyboard Navigation" mt={false}>
      <p class="not-prose">The Button component supports standard keyboard interactions, allowing users to navigate and activate it using the <code>Tab</code> key to focus and the <code>Enter</code> or <code>Space</code> keys to trigger the action.</p>
      <p class="not-prose">By following these guidelines and using the provided props, you can ensure that the Button component enhances accessibility, providing a seamless experience for all users.</p>
    </Example>
    <Example title="Automatic ARIA Management" mt={false}>
      <p class="not-prose">The QAB component automatically handles important ARIA attributes:</p>
      <ul class="my-0">
        <li>The <span class="not-prose"><code>role</code></span> attribute is set to ensure the component is recognized as a button.</li>
        <li>The <span class="not-prose"><code>aria-expanded</code></span> attribute is automatically managed to indicate the open or closed state if the button controls additional content.</li>
      </ul>
    </Example>
  </DocBlock>

  <DocBlock title="Configuration">
    <QABComponent title="QAB" component={component.qab} />
    <QABItemComponent title="QAB Item" component={component.item} />
  </DocBlock>


  {#snippet sidebar()}
    <a href={processID("About")}>About</a>
    <a href={processID("Example")}>Example</a>
    <a href={processID("Link")}>QAB Link</a>
    <a href={processID("Alignment")}>Alignment</a>
    <a href={processID("Sizes")}>Sizes</a>
    <a href={processID("Direction")}>Direction</a>
    <a href={processID("QAB Color")}>QAB Color</a>
    <a href={processID("Theme")}>Theme</a>
    <a href={processID("Light Theme")} class="ps-4">Light Theme</a>
    <a href={processID("Gradient Theme")} class="ps-4">Gradient Theme</a>
    <a href={processID("QAB Trigger Event")}>Trigger Event</a>
    <a href={processID("Rounded Corner Button")}>Rounded Button</a>
    <a href={processID("Animation Speed")}>Animation Speed</a>
    <a href={processID("Customization")}>Customization</a>
    <a href={processID("Accessibility")}>Accessibility</a>
    <a href={processID("Configuration")}>Configuration</a>
    <a class="ps-4" href={processID("QAB")}>QAB</a>
    <a class="ps-4" href={processID("QAB Item")}>QAB Item</a>
  {/snippet}

</DocLayout>