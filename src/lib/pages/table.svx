---
title: Table
dir: ".lib/pages"
description: Present data effectively in your Svelte app with theui-svelte's Table component, supporting responsive and customizable designs.
---

<script lang="ts">
  import DocLayout from "$lib/ui/doc/DocLayout.svelte";
  import DocHead from "$lib/ui/doc/Head.svelte";
  import DocBlock from "$lib/ui/doc/Block.svelte";
  import Code from "$lib/ui/doc/CodeBlock.svelte";
  import Example from "$lib/ui/doc/Example.svelte";
  import ConfigComponent from "$lib/ui/doc/ConfigComponent.svelte";
  import { processID } from "$lib";
  let { component, edit_url }: {component: any, edit_url?: string } = $props();

  import { Table, THead, TBody, TR, TH, TD, Button, Svg } from "theui-svelte";

  let headers = ["Heading 1", "Heading 2", "Heading 3", "Heading 4"];
  let data = [
    {item1: "Data 11", item2: "Data 12", item3: "Data 13", item4: "Data 14"},
    {item1: "Data 21", item2: "Data 22", item3: "Data 23", item4: "Data 24"},
    {item1: "Data 31", item2: "Data 23", item3: "Data 33", item4: "Data 43"},
  ];
  let keys = ["item1", "item2", "item3", "item4"];
</script>

<DocLayout>
  <DocHead title="Table" text="A flexible and customizable way to display data in a structured format. It supports various styling options and interactive features to enhance usability." {edit_url}/>

  <DocBlock title="About">
    <p class="not-prose">The <code>Table</code> component is highly customizable and automatically generates tables from object/JSON data if needed. It supports custom styling, column alignment, and interactive features, making it easy to display structured data efficiently. Whether for simple data presentation or complex tables with sorting and filtering, this component ensures a clean and responsive layout.</p>
  </DocBlock>

  <DocBlock title="Example">
    <div>
      <p class="not-prose">The <code>Table</code> is a powerful, versatile component. You can create a table in many ways. For example:</p>
      <ul class="my-0">
        <li>Using data</li>
        <li>Using snippet</li>
        <li>Manually using the components</li>
      </ul>
    </div>
    <Example title="Setup">
      <p class="not-prose">At first import the relevant components of the table.</p>
      {#snippet code()}

```html
<script>
  import { Table, THead, TBody, TR, TH, TD } from "theui-svelte";
</script>
```
      {/snippet}
    </Example>
    <Example title="Example: Using Props">
      <p class="not-prose">The <code>Table</code> component allows you to generate tables dynamically using data. This approach is useful when you have structured data and want to render it efficiently without manually defining each row and column. This method ensures your table remains dynamic and adaptable to different datasets.</p>
      <p class="not-prose">Pass the <code>headers</code>, <code>data</code>, and <code>keys</code> as props to the <code>Table</code> component.</p>
      <ul class="my-0">
        <li>headers ( <span class="not-prose"><code>string[]</code></span> ) - An array of column headers.</li>
        <li>data ( <span class="not-prose"><code>object[]</code></span> ) - An array of objects representing table rows.</li>
        <li>keys ( <span class="not-prose"><code>string[]</code></span> ) - An array of keys that map data fields to columns.</li>
      </ul>
      {#snippet example()}
        <Table {headers} {data} {keys} />
      {/snippet}

      {#snippet code()}
```html
<script>
  let headers = ["Heading 1", "Heading 2", "Heading 3", "Heading 4"];
  let data = [
    {item1: "Data 11", item2: "Data 12", item3: "Data 13", item4: "Data 14"},
    {item1: "Data 21", item2: "Data 22", item3: "Data 23", item4: "Data 24"},
    {item1: "Data 31", item2: "Data 23", item3: "Data 33", item4: "Data 43"},
  ];
  let keys = ["item1", "item2", "item3", "item4"];
</script>

<!-- Option 1 -->
<Table {headers} {data} {keys} />

<!-- Option 2 -->
<Table>
  <THead {headers} />
  <TBody {data} {keys} />
</Table>

<!-- Option 3 -->
<Table {headers}>
  <TBody>
    {#each data as d}
      <TR data={d} {keys} />
    {/each}
  </TBody>
</Table>
```
      {/snippet}
    </Example>

    <Example title="Example: Using Components">
      <p class="not-prose">Instead of props or dynamically looping through the data, the table content is written manually using the <code>TBody</code>, <code>TR</code>, and <code>Cell</code> components.</p>
      <ul class="my-0">
        <li><span class="not-prose"><code>&lt;TBody&gt;</code></span> - Contains the table rows.</li>
        <li><span class="not-prose"><code>&lt;TR&gt;</code></span> - Represents a table row.</li>
        <li><span class="not-prose"><code>&lt;TD&gt;</code></span> - Represents a table data containing the actual data.</li>
      </ul>
      {#snippet example()}
        <Table {headers} {data} {keys} />
      {/snippet}

      {#snippet code()}
```html
<Table {headers}>
  <THead>
    <TR>
      <TH>Heading 1</TH>
      <TH>Heading 2</TH>
      <TH>Heading 3</TH>
      <TH>Heading 4</TH>
    </TR>
  </THead>
  <TBody>
    <TR>
      <TD>Data 11</TD>
      <TD>Data 12</TD>
      <TD>Data 13</TD>
      <TD>Data 14</TD>
    </TR>
    ...
    ...
  </TBody>
</Table>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Custom Header">
    <Example>
      <p class="not-prose">If you need custom headers or anything other than text in the header just put your custom items in the <code>TH</code> component. For example:</p>
      {#snippet example()}
        <Table>
          <THead>
            <TR>
              <TH class="items-center gap-2">
                Sort
                <Svg class="inline">
                  <path d="M3.5 12.5a.5.5 0 0 1-1 0V3.707L1.354 4.854a.5.5 0 1 1-.708-.708l2-1.999.007-.007a.5.5 0 0 1 .7.006l2 2a.5.5 0 1 1-.707.708L3.5 3.707zm3.5-9a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5M7.5 6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1zm0 3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1zm0 3a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1z"/>
                </Svg>
              </TH>
              <TH class="items-center gap-2">
                Sort
                <Svg class="inline">
                  <path d="M3.5 2.5a.5.5 0 0 0-1 0v8.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L3.5 11.293zm3.5 1a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5M7.5 6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1zm0 3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1zm0 3a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1z"/>
                </Svg>
              </TH>
            </TR>
          </THead>
        </Table>
      {/snippet}

      {#snippet code()}
```html
<Table>
  <THead>
    <TR>
      <TH class="items-center gap-2">
        Sort
        <Svg class="inline">
          <path d="M3.5 12.5a.5.5 0 0 ... 0 1h1a.5.5 0 0 0 0-1z"/>
        </Svg>
      </TH>
      <TH class="items-center gap-2">
        Sort
        <Svg class="inline">
          <path d="M3.5 2.5a.5.5 0 0 0-1 ... 1h1a.5.5 0 0 0 0-1z"/>
        </Svg>
      </TH>
    </TR>
  </THead>
</Table>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Table Border">
    <Example>
      <p class="not-prose">The <code>border</code> prop controls where borders appear in the table. By default, it is set to <code>"both"</code>. Setting it to <code>"x"</code> adds borders only between columns, while <code>"y"</code> applies borders only between rows. The default option, <code>"both"</code>, adds borders between both rows and columns, and <code>"none"</code> removes all borders. This prop allows you to customize the table’s appearance based on your design preferences.</p>
      {#snippet example()}
        <div class="flex flex-col gap-4 w-full">
          <div>
            <code>border="x"</code>
            <Table {headers} {data} {keys} border="x" />
          </div>
          <div>
            <code>border="y"</code>
            <Table {headers} {data} {keys} border="y" />
          </div>
          <div>
            <code>border="none"</code>
            <Table {headers} {data} {keys} border="none" />
          </div>
        </div>
      {/snippet}

      {#snippet code()}
```html
<Table {headers} {data} {keys} border="x" />
<Table {headers} {data} {keys} border="y" />
<Table {headers} {data} {keys} border="none" />
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Table Spacing">
    <Example>
      <p class="not-prose">The <code>space</code> prop adjusts the cell padding to control the overall table spacing, affecting how compact or spacious the table appears.</p>
      <ul class="my-0">
        <li><span class="not-prose"><code>"compact"</code></span> - Reduces padding for a denser layout, making the table more space-efficient.</li>
        <li><span class="not-prose"><code>"default"</code> (Default value)</span> - Uses the standard padding, providing a balanced look.</li>
        <li><span class="not-prose"><code>"comfortable"</code></span> - Increases padding for a more spacious and readable layout.</li>
      </ul>
      {#snippet example()}
        <div class="flex flex-col gap-4 w-full">
          <div>
            <code>space="compact"</code>
            <Table {headers} {data} {keys} space="compact" />
          </div>
          <div>
            <code>space="comfortable"</code>
            <Table {headers} {data} {keys} space="comfortable" />
          </div>
        </div>
      {/snippet}

      {#snippet code()}
```html
<Table {headers} {data} {keys} space="compact" />
<Table {headers} {data} {keys} space="comfortable" />
```
      {/snippet}
    </Example>
    <p class="not-prose">This prop allows you to fine-tune the table’s appearance based on your design needs.</p>
  </DocBlock>

  <DocBlock title="Stripe Rows">
    <Example>
      <p class="not-prose">The <code>stripe</code> prop enables alternating row colors for better readability. By default, it is set to <code>false<code></p>
      <ul class="my-0">
        <li><span class="not-prose"><code>true</code></span> - Applies striping to table rows, making it easier to distinguish between rows.</li>
        <li><span class="not-prose"><code>false</code> (Default value)</span> - No striping is applied.</li>
        <li><b>String value</b> - Allows specifying a custom class for styling the striped rows.</li>
      </ul>
      {#snippet example()}
        <div class="flex flex-col gap-4 w-full">
          <div>
            <code>false</code>
            <Table {headers} {data} {keys} stripe={true} />
          </div>
          <div>
            <code>stripe="custom classes"</code>
            <Table {headers} {data} {keys} stripe="comfortable" />
          </div>
        </div>
      {/snippet}

      {#snippet code()}
```html
<Table>

</Table>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Hoverable Rows">
    <Example>
      <p class="not-prose">The <code>Table</code> is a powerful, versatile component. You can create a table in many ways. For example:</p>
      {#snippet example()}

      {/snippet}

      {#snippet code()}
```html
<Table>

</Table>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Anatomy of Table">
    <Example>
      <p class="not-prose">The <code>Table</code> is a powerful, versatile component. You can create a table in many ways. For example:</p>
      {#snippet example()}

      {/snippet}

      {#snippet code()}
```html
<Table>

</Table>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Customization">
  </DocBlock>

  <DocBlock title="Accessibility">
    <div>
      <p class="not-prose">The modal component is designed with accessibility in mind, ensuring it can be used by everyone, including users relying on assistive technologies. By default, it includes the necessary ARIA attributes and supports keyboard navigation.</p>
      <ol class="my-0">
        <li>
          <b>ARIA Attributes</b>: The Modal uses <span class="not-prose"><code>role="dialog"</code></span> by default to indicate its purpose to assistive technologies. You can add <span class="not-prose"><code>aria-labelledby</code></span> and <span class="not-prose"><code>aria-describedby</code></span> attributes to associate the title and content with the Modal.
        </li>
        <li>
          <b>Keyboard Navigation</b>
          <ul>
            <li>Focus is automatically moved to the Modal when it opens.</li>
            <li>Users can navigate through focusable elements using the <kbd>tab</kbd> key.</li>
            <li>Pressing the <kbd>Esc</kbd> key closes the Modal.</li>
          </ul>
        </li>
        <li><b>Focus Management</b>: Focus is trapped within the Modal while it is open, ensuring users cannot interact with elements outside of it. When the Modal is closed, focus returns to the triggering element.</li>
        <li><b>Screen Reader Announcements</b>: The Modal is announced as a dialog to screen readers, helping users understand its purpose.</li>
        <li><b>Color Contrast</b>: Ensure that text and background colors inside the Modal meet <Button href="https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html" target="_blank" externalLinkIcon={true} class="p-0 bg-transparent text-brand-primary-500 shadow-none hover:bg-transparent flex-wrap">WCAG contrast ratio standards</Button>.</li>
      </ol>
    </div>
  </DocBlock>

  <DocBlock title="Configuration">
    <ConfigComponent component={component} />
  </DocBlock>

  {#snippet sidebar()}
    <a href={processID("About")}>About</a>
    <a href={processID("Example")}>Example</a>
    <a href={processID("Table Using Data")} class="ps-4">Table Using Data</a>
    <a href={processID("Table Using Snippet")} class="ps-4">Table Using Snippet</a>
    <a href={processID("Table Using Components")} class="ps-4">Table Using Components</a>
    <a href={processID("Table Border")}>Table Border</a>
    <a href={processID("Table Spacing")}>Table Spacing</a>
    <a href={processID("Stripe Rows")}>Stripe Rows</a>
    <a href={processID("Hoverable Rows")}>Hoverable Rows</a>
    <a href={processID("Anatomy of Table")}>Anatomy of Table</a>
    <a href={processID("Customization")}>Customization</a>
    <a href={processID("Accessibility")}>Accessibility</a>
    <a href={processID("Configuration")}>Configuration</a>
  {/snippet}
</DocLayout>