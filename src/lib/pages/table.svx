---
title: Table
dir: ".lib/pages"
description: Present data effectively in your Svelte app with theui-svelte's Table component, supporting responsive and customizable designs.
---

<script lang="ts">
  import DocLayout from "$lib/ui/doc/DocLayout.svelte";
  import DocHead from "$lib/ui/doc/Head.svelte";
  import DocBlock from "$lib/ui/doc/Block.svelte";
  import Code from "$lib/ui/doc/CodeBlock.svelte";
  import Example from "$lib/ui/doc/Example.svelte";

  import TableConfigComponent from "$lib/ui/doc/ConfigComponent.svelte";
  import THeadConfigComponent from "$lib/ui/doc/ConfigComponent.svelte";
  import TBodyConfigComponent from "$lib/ui/doc/ConfigComponent.svelte";
  import TRConfigComponent from "$lib/ui/doc/ConfigComponent.svelte";

  import { processID } from "$lib";
  let { component, edit_url }: {component: any, edit_url?: string } = $props();

  import { Table, THead, TBody, TR, TH, TD, Button, Svg, Alert } from "theui-svelte";

  let headers = ["Heading 1", "Heading 2", "Heading 3", "Heading 4"];
  let data = [
    {item1: "Data 11", item2: "Data 12", item3: "Data 13", item4: "Data 14"},
    {item1: "Data 21", item2: "Data 22", item3: "Data 23", item4: "Data 24"},
    {item1: "Data 31", item2: "Data 23", item3: "Data 33", item4: "Data 43"},
  ];
  let keys = ["item1", "item2", "item3", "item4"];
</script>

<DocLayout>
  <DocHead title="Table" text="A flexible and customizable way to display data in a structured format. It supports various styling options and interactive features to enhance usability." {edit_url}/>

  <DocBlock title="About">
    <p class="not-prose">The <code>Table</code> component is highly customizable and automatically generates tables from object/JSON data if needed. It supports custom styling, column alignment, and interactive features, making it easy to display structured data efficiently. Whether for simple data presentation or complex tables with sorting and filtering, this component ensures a clean and responsive layout.</p>
  </DocBlock>

  <DocBlock title="Example">
    <div>
      <p class="not-prose">The <code>Table</code> is a powerful, versatile component. You can create a table in many ways. For example:</p>
      <ul class="my-0">
        <li>Using data</li>
        <li>Using snippet</li>
        <li>Manually using the components</li>
      </ul>
    </div>
    <Example title="Setup">
      <p class="not-prose">At first import the relevant components of the table.</p>
      {#snippet code()}

```html
<script>
  import { Table, THead, TBody, TR, TH, TD } from "theui-svelte";
</script>
```
      {/snippet}
    </Example>
    <Example title="Example: Using Props">
      <p class="not-prose">The <code>Table</code> component allows you to generate tables dynamically using data. This approach is useful when you have structured data and want to render it efficiently without manually defining each row and column. This method ensures your table remains dynamic and adaptable to different datasets.</p>
      <p class="not-prose">Pass the <code>headers</code>, <code>data</code>, and <code>keys</code> as props to the <code>Table</code> component.</p>
      <ul class="my-0">
        <li><span class="not-prose"><code>headers: string[]</code></span> - An array of column headers.</li>
        <li><span class="not-prose"><code>data: object[]</code></span> - An array of objects representing table rows.</li>
        <li><span class="not-prose"><code>keys: string[]</code></span> - An array of keys that map data fields to columns.</li>
      </ul>
      {#snippet example()}
        <Table {headers} {data} {keys} />
      {/snippet}

      {#snippet code()}
```html
<script>
  let headers = ["Heading 1", "Heading 2", "Heading 3", "Heading 4"];
  let data = [
    {item1: "Data 11", item2: "Data 12", item3: "Data 13", item4: "Data 14"},
    {item1: "Data 21", item2: "Data 22", item3: "Data 23", item4: "Data 24"},
    {item1: "Data 31", item2: "Data 23", item3: "Data 33", item4: "Data 43"},
  ];
  let keys = ["item1", "item2", "item3", "item4"];
</script>

<!-- Option 1 -->
<Table {headers} {data} {keys} />

<!-- Option 2 -->
<Table>
  <THead {headers} />
  <TBody {data} {keys} />
</Table>

<!-- Option 3 -->
<Table {headers}>
  <TBody>
    {#each data as d}
      <TR data={d} {keys} />
    {/each}
  </TBody>
</Table>
```
      {/snippet}
    </Example>

    <Example title="Example: Using Components">
      <p class="not-prose">Instead of props or dynamically looping through the data, the table content is written manually using the <code>TBody</code>, <code>TR</code>, and <code>Cell</code> components.</p>
      <ul class="my-0">
        <li><span class="not-prose"><code>&lt;TBody&gt;</code></span> - Contains the table rows.</li>
        <li><span class="not-prose"><code>&lt;TR&gt;</code></span> - Represents a table row.</li>
        <li><span class="not-prose"><code>&lt;TD&gt;</code></span> - Represents a table data containing the actual data.</li>
      </ul>
      {#snippet example()}
        <Table {headers} {data} {keys} />
      {/snippet}

      {#snippet code()}
```html
<Table {headers}>
  <THead>
    <TR>
      <TH>Heading 1</TH>
      <TH>Heading 2</TH>
      <TH>Heading 3</TH>
      <TH>Heading 4</TH>
    </TR>
  </THead>
  <TBody>
    <TR>
      <TD>Data 11</TD>
      <TD>Data 12</TD>
      <TD>Data 13</TD>
      <TD>Data 14</TD>
    </TR>
    ...
    ...
  </TBody>
</Table>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Custom Header">
    <Example>
      <p class="not-prose">If you need custom headers or anything other than text in the header just put your custom items in the <code>TH</code> component. For example:</p>
      {#snippet example()}
        <Table>
          <THead>
            <TR>
              <TH class="items-center gap-2">
                Sort
                <Svg class="inline">
                  <path d="M3.5 12.5a.5.5 0 0 1-1 0V3.707L1.354 4.854a.5.5 0 1 1-.708-.708l2-1.999.007-.007a.5.5 0 0 1 .7.006l2 2a.5.5 0 1 1-.707.708L3.5 3.707zm3.5-9a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5M7.5 6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1zm0 3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1zm0 3a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1z"/>
                </Svg>
              </TH>
              <TH class="items-center gap-2">
                Sort
                <Svg class="inline">
                  <path d="M3.5 2.5a.5.5 0 0 0-1 0v8.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L3.5 11.293zm3.5 1a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5M7.5 6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1zm0 3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1zm0 3a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1z"/>
                </Svg>
              </TH>
            </TR>
          </THead>
        </Table>
      {/snippet}

      {#snippet code()}
```html
<Table>
  <THead>
    <TR>
      <TH class="items-center gap-2">
        Sort
        <Svg class="inline">
          <path d="M3.5 12.5a.5.5 0 0 ... 0 1h1a.5.5 0 0 0 0-1z"/>
        </Svg>
      </TH>
      <TH class="items-center gap-2">
        Sort
        <Svg class="inline">
          <path d="M3.5 2.5a.5.5 0 0 0-1 ... 1h1a.5.5 0 0 0 0-1z"/>
        </Svg>
      </TH>
    </TR>
  </THead>
</Table>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Table Border">
    <Example>
      <p class="not-prose">The <code>border</code> prop controls where borders appear in the table. By default, it is set to <code>"both"</code>. Setting it to <code>"x"</code> adds borders only between columns, while <code>"y"</code> applies borders only between rows. The default option, <code>"both"</code>, adds borders between both rows and columns, and <code>"none"</code> removes all borders. This prop allows you to customize the tableâ€™s appearance based on your design preferences.</p>
      {#snippet example()}
        <div class="flex flex-col gap-4 w-full">
          <div id="horizontal-border-x">
            <span class="block font-semibold mb-2">Horizontal border: <code>border="x"</code></span>
            <Table {headers} {data} {keys} border="x" />
          </div>
          <div id="horizontal-border-y">
            <span class="block font-semibold mb-2">Vertical border: <code>border="y"</code></span>
            <Table {headers} {data} {keys} border="y" />
          </div>
          <div id="horizontal-border-none">
            <span class="block font-semibold mb-2">No border: <code>border="none"</code></span>
            <Table {headers} {data} {keys} border="none" />
          </div>
        </div>
      {/snippet}

      {#snippet code()}
```html
<Table {headers} {data} {keys} border="x" />
<Table {headers} {data} {keys} border="y" />
<Table {headers} {data} {keys} border="none" />
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Table Spacing">
    <Example>
      <p class="not-prose">The <code>space</code> prop adjusts the cell padding to control the overall table spacing, affecting how compact or spacious the table appears.</p>
      <ul class="my-0">
        <li><span class="not-prose"><code>"compact"</code></span> - Reduces padding for a denser layout, making the table more space-efficient.</li>
        <li><span class="not-prose"><code>"default"</code> (Default value)</span> - Uses the standard padding, providing a balanced look.</li>
        <li><span class="not-prose"><code>"comfortable"</code></span> - Increases padding for a more spacious and readable layout.</li>
      </ul>
      {#snippet example()}
        <div class="flex flex-col gap-4 w-full">
          <div id="compact-spacing">
            <span class="block font-semibold mb-2">Compact spacing: <code>space="compact"</code></span>
            <Table {headers} {data} {keys} space="compact" />
          </div>
          <div id="comfortable-spacing">
            <span class="block font-semibold mb-2">Comfortable spacing: <code>space="comfortable"</code></span>
            <Table {headers} {data} {keys} space="comfortable" />
          </div>
        </div>
      {/snippet}

      {#snippet code()}
```html
<Table {headers} {data} {keys} space="compact" />
<Table {headers} {data} {keys} space="comfortable" />
```
      {/snippet}
    </Example>
    <p class="not-prose">This prop allows you to fine-tune the tableâ€™s appearance based on your design needs.</p>
  </DocBlock>

  <DocBlock title="Stripe Rows">
    <div>
      <p class="not-prose">The <code>stripe</code> prop adds alternating background colors to table rows, improving readability and visual distinction between rows. By default, this feature is disabled (<code>undefined</code>), meaning all rows have the same background.</p>
      <ul class="my-0">
        <li><span class="not-prose"><code>"even"</code></span> - Applies striping to even-numbered rows, making them visually distinct from odd rows.</li>
        <li><span class="not-prose"><code>"odd"</code> Applies striping to odd-numbered rows, enhancing readability by differentiating them from even rows.</li>
        <li><i class="font-semibold">Custom class names</i> - You can specify a class name instead of predefined values to apply custom styling. This allows full control over the appearance of striped rows, making it easy to match your design needs.</li>
      </ul>
    </div>
    <Example>
      {#snippet example()}
        <div class="flex flex-col gap-4 w-full">
          <div id="striped-even-rows">
            <span class="block font-semibold mb-2">Striped even rows: <code>stripe="even"</code></span>
            <Table {headers} {data} {keys} stripe="even" />
          </div>
          <div id="striped-odd-rows">
            <span class="block font-semibold mb-2">Striped odd rows: <code>stripe="odd"</code></span>
            <Table {headers} {data} {keys} stripe="odd" />
          </div>
          <div id="striped-custom-even-rows">
            <span class="block font-semibold mb-2">Striped even rows with custom classes: <code>stripe="&lt;CUSTOM CLASSES&gt;"</code></span>
            <Table {headers} {data} {keys} stripe="even:bg-green-100 dark:even:bg-green-900" />
          </div>
          <div id="striped-custom-odd-rows">
            <span class="block font-semibold mb-2">Striped odd rows with custom classes: <code>stripe="&lt;CUSTOM CLASSES&gt;"</code></span>
            <Table {headers} {data} {keys} stripe="odd:bg-green-100 dark:odd:bg-green-900" />
          </div>
        </div>
      {/snippet}

      {#snippet code()}

```html
<!-- Striped even rows -->
<Table {headers} {data} {keys} stripe="even" />
<!-- Striped odd rows -->
<Table {headers} {data} {keys} stripe="odd" />
<!-- Striped even rows with custom classes -->
<Table {headers} {data} {keys} stripe="even:bg-green-100 dark:even:bg-green-900" />
<!-- Striped odd rows with custom classes -->
<Table {headers} {data} {keys} stripe="odd:bg-green-100 dark:odd:bg-green-900" />
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Hoverable Rows">
    <Example>
      <p class="not-prose">The <code>hover</code> prop enables a visual highlight effect when users hover over table rows. By default, this feature is disabled (undefined), meaning no hover effect is applied.</p>
      <ul class="my-0">
        <li><span class="not-prose"><code>true</code></span> - When set to <span class="not-prose"><code>true</code></span>, the row background color changes on hover, improving user experience and readability.</li>
        <li><i class="font-semibold">Custom class names</i> - Instead of using the default hover effect, you can pass a custom class to define your own hover styles, allowing for more design flexibility.</li>
      </ul>
      {#snippet example()}
        <div class="flex flex-col gap-4 w-full">
          <div id="default-hoverable-rows">
            <span class="block font-semibold mb-2">Hoverable rows: <code>hover={"{"+true+"}"}</code></span>
            <Table {headers} {data} {keys} hover={true} />
          </div>
          <div id="custom-hoverable-rows">
            <span class="block font-semibold mb-2">Hoverable rows with custom classes: <code>hover="&lt;CUSTOM CLASSES&gt;"</code></span>
            <Table {headers} {data} {keys} hover="hover:bg-red-100" />
          </div>
        </div>
      {/snippet}

      {#snippet code()}
```html
<!-- Hoverable rows -->
<Table {headers} {data} {keys} hover={true} />
<!-- Hoverable rows with custom classes -->
<Table {headers} {data} {keys} hover="hover:bg-red-100" />
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Customization">
    <p class="not-prose">You can use the following props to customize the tableâ€™s appearance, allowing you to style the table and its elements as needed.</p>
    <ul class="my-0">
      <li><span class="not-prose"><code>borderColor</code></span> - Defines the border color for the table. By default, it is set to <code>"border-gray-200/80 dark:border-gray-800/80"</code>, ensuring a subtle contrast in both light and dark modes. You can override this with any Tailwind CSS border color class.</li>
      <li><span class="not-prose"><code>trHeadClasses</code></span> - Adds custom classes to the table header row ((&lt;tr&gt; inside &lt;thead&gt;)). This allows you to style the header separately, such as applying background colors, text styles, or spacing adjustments.</li>
      <li><span class="not-prose"><code>trClasses</code></span> - Applies custom classes to all table body rows (&lt;tr&gt; inside &lt;tbody&gt;). Use this to control row styling, such as padding, text alignment, or hover effects.</li>
      <li><span class="not-prose"><code>tdClasses</code></span> - Adds custom classes to all table cells (&lt;td&gt;), enabling precise control over text size, padding, alignment, or other styles.</li>
    </ul>
    <Alert type="warning" theme="soft"><span>you can use <span class="not-prose"><code>class</code></span> attribute with any table related component to add your custom CSS classes.</span></Alert>
    <p class="not-prose">These props provide flexibility in styling, making it easy to adapt the table to different designs and themes.</p>
  </DocBlock>

  <DocBlock title="Configuration">
    <TableConfigComponent title="Table" component={component.table} />
    <THeadConfigComponent title="Table Head" component={component.thead} />
    <TBodyConfigComponent title="Table Body" component={component.tbody} />
    <TRConfigComponent title="Table Row"component={component.tr} />
  </DocBlock>

  {#snippet sidebar()}
    <a href={processID("About")}>About</a>
    <a href={processID("Example")}>Example</a>
    <a href={processID("Setup")} class="ps-4">Setup</a>
    <a href={processID("Example: Using Props")} class="ps-4">Example: Using Props</a>
    <a href={processID("Example: Using Components")} class="ps-4">Example: Using Components</a>
    <a href={processID("Custom Header")}>Custom Header</a>
    <a href={processID("Table Border")}>Table Border</a>
    <a href="#horizontal-border-x" class="ps-4">Horizontal border</a>
    <a href="#horizontal-border-y" class="ps-4">Vertical border</a>
    <a href="#horizontal-border-none" class="ps-4">Borderless table</a>
    <a href={processID("Table Spacing")}>Table Spacing</a>
    <a href="#compact-spacing" class="ps-4">Compact spacing</a>
    <a href="#comfortable-spacing" class="ps-4">Comfortable spacing</a>
    <a href={processID("Stripe Rows")}>Stripe Rows</a>
    <a href="#striped-even-rows" class="ps-4">Striped even rows</a>
    <a href="#striped-odd-rows" class="ps-4">Striped odd rows</a>
    <a href="#striped-custom-even-rows" class="ps-4">Striped custom even rows</a>
    <a href="#striped-custom-odd-rows" class="ps-4">Striped custom odd rows</a>
    <a href={processID("Hoverable Rows")}>Hoverable Rows</a>
    <a href="#default-hoverable-rows" class="ps-4">Default hoverable rows</a>
    <a href="#custom-hoverable-rows" class="ps-4">Custom hoverable rows</a>
    <a href={processID("Anatomy of Table")}>Anatomy of Table</a>
    <a href={processID("Customization")}>Customization</a>
    <a href={processID("Accessibility")}>Accessibility</a>
    <a href={processID("Configuration")}>Configuration</a>
    <a class="ps-4" href={processID("Table")}>Table</a>
    <a class="ps-4" href={processID("Table Head")}>Table head</a>
    <a class="ps-4" href={processID("Table body")}>Table body</a>
    <a class="ps-4" href={processID("Table row")}>Table row</a>
  {/snippet}
</DocLayout>