---
title: Accordion
dir: ".lib/pages"
description: Enhance your Svelte app with theui-svelte's Accordion component. Easily create collapsible sections to streamline your content presentation.
---

<script lang="ts">
  import DocLayout from "$lib/ui/doc/DocLayout.svelte";
  import DocHead from "$lib/ui/doc/Head.svelte";
  import DocBlock from "$lib/ui/doc/Block.svelte";
  import Code from "$lib/ui/doc/CodeBlock.svelte";
  import Example from "$lib/ui/doc/Example.svelte";
  import AccordionConfig from "$lib/ui/doc/ConfigComponent.svelte";
  import ItemConfig from "$lib/ui/doc/ConfigComponent.svelte";
  import { processID } from "$lib";
  let { component, edit_url }: {component: any, edit_url?: string } = $props();

  import { Accordion, AccordionItem } from "theui-svelte";

  const accordionContent = "<b>Cognitive dissonance</b> refers to the discomfort we feel when holding conflicting beliefs or attitudes. For instance, a person who smokes but knows it's harmful might experience tension. To alleviate this discomfort, they may justify their behavior by downplaying the risks or highlighting benefits, like stress relief. This psychological mechanism illustrates how we strive for internal consistency, shaping our perceptions and decisions to align with our beliefs and actions."
  const accordionTitle = "Human Psychology Fact";
</script>

<DocLayout>
  <DocHead title="Accordion" text="The Accordion component is used to show or hide information based on the collapse and expand state of its child elements. It has two variants with configurations provided in the Configuration section." {edit_url}/>

  <DocBlock title="Example">
    <p class="not-prose">Import the required components <code>Accordion</code> and <code>AccordionItem</code> to use it in your project.</p>
    <Code>

```html
<script>
  import { Accordion, AccordionItem } from "theui-svelte";
</script>
```
    </Code>
    <p class="not-prose">You can create an accordion in two ways, using props and using Svelte 5 snippet. The example are showing below:</p>
    <Example title="Title Using prop">
      <p class="not-prose">You can create an accordion item with a title and content props using the following example. </p>
      {#snippet example()}
      <div>
        <AccordionItem title={accordionTitle}>
          {@html accordionContent}
        </AccordionItem>
      </div>
      {/snippet}
      {#snippet code()}

```html
<AccordionItem title="Human Psychology Fact">
  <b>Cognitive dissonance</b> refers to the ...
</AccordionItem>
```
      {/snippet}
    </Example>

    <Example title="Title Using Snippet">
      <p class="not-prose">If you have custom content/elements in the title or content, you ca use <b>Svelte 5</b>'s <code>snippet</code> showing the following example:</p>
      {#snippet example()}
      <div>
        <AccordionItem>
          {#snippet title()}
            {accordionTitle}
          {/snippet}
          {@html accordionContent}
        </AccordionItem>
      </div>
      {/snippet}
      {#snippet code()}

```html
<AccordionItem>
  {#snippet title()}
    Human Psychology Fact
  {/snippet}
  <b>Cognitive dissonance</b> refers to the ...
</AccordionItem>
```

      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Group Accordion">
    <Example>
      <p class="not-prose">To create a group of accordion items, wrap multiple <code>AccordionItem</code> components within an <code>Accordion</code> component:</p>
      {#snippet example()}
      <div>
        <Accordion>
          <AccordionItem title={accordionTitle + ": 1"}>
            {@html accordionContent}
          </AccordionItem>
          <AccordionItem title={accordionTitle + ": 2"}>
            {@html accordionContent}
          </AccordionItem>
        </Accordion>
      </div>
      {/snippet}
      {#snippet code()}

```html
<Accordion>
  <AccordionItem title="Human Psychology Fact: 1">
    ...
  </AccordionItem>
  <AccordionItem title="Human Psychology Fact: 2">
    ...
  </AccordionItem>
</Accordion>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Flash Accordion">
    <Example>
      <p class="not-prose">The Flush Accordion is a sleek and minimalist variant of the Accordion component, designed for users who prefer a simple, streamlined appearance. By setting the <code>flush</code> attribute on the <code>Accordion</code>, all the contained <code>AccordionItem</code> components will adopt this flush style, providing a consistent and clean look across the entire accordion.</p>
      {#snippet example()}
      <div>
        <Accordion>
          <AccordionItem flush title={accordionTitle + ": 1"}>
            {@html accordionContent}
          </AccordionItem>
          <AccordionItem flush title={accordionTitle + ": 2"}>
            {@html accordionContent}
          </AccordionItem>
        </Accordion>
      </div>
      {/snippet}
      {#snippet code()}

```html
<Accordion flush> ... </Accordion>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Sizes">
    <Example>
      <p class="not-prose mb-4">The <code>Accordion</code> and <code>AccordionItem</code> component provides a <code>size</code> prop to control the size of the accordion items. The <code>size</code> prop can take one of the following values: <code>'compact'</code>, <code>'default'</code>, or <code>'large'</code>.</p>
      <p class="not-prose">When the <code>size</code> prop is set on the <code>Accordion</code> component, all <code>AccordionItem</code> components within it will inherit this size. This ensures a consistent appearance for all items in the accordion.</p>
    
      {#snippet example()}
      <div>
        <Accordion size="compact">
          <AccordionItem title={accordionTitle + ": 1"}>
            {@html accordionContent}
          </AccordionItem>
          <AccordionItem title={accordionTitle + ": 2"}>
            {@html accordionContent}
          </AccordionItem>
        </Accordion>
      </div>
      {/snippet}
      {#snippet code()}

```html
<Accordion size="compact"> ... </Accordion>
```
      {/snippet}
    </Example>

    <p class="not-prose">In the example above, all the <code>AccordionItem</code>s components will have the <code>compact</code> size. Setting it on <code>Accordion</code> ensures all items match for a consistent look.</p>
    <Example>
      <p class="not-prose">You can also set the <code>size</code> prop individually on each <code>AccordionItem</code> component which will override the size specified on the <code>Accordion</code>.</p>
      {#snippet example()}
      <div>
        <Accordion size="compact">
          <AccordionItem title={accordionTitle + ": 1"}>
            {@html accordionContent}
          </AccordionItem>
          <AccordionItem size="large" title={accordionTitle + ": 2"}>
            {@html accordionContent}
          </AccordionItem>
        </Accordion>
      </div>
      {/snippet}
      {#snippet code()}

```html
<Accordion size="compact">
  <AccordionItem>
    ...
  </AccordionItem>
  <AccordionItem size="large">
    ...
  </AccordionItem>
</Accordion>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Accordion Open State">
    <Example>
      <p class="not-prose">To have an <code>AccordionItem</code> open by default, add the <code>open</code> attribute to the <code>AccordionItem</code> you want to keep open. This is a dynamic attribute, not a prop, and will take effect when added to the component.</p>
      {#snippet example()}
      <div>
        <Accordion>
          <AccordionItem title={accordionTitle + ": 1"}>
            {@html accordionContent}
          </AccordionItem>
          <AccordionItem title={accordionTitle + ": 2"} open={true}>
            {@html accordionContent}
          </AccordionItem>
        </Accordion>
      </div>
      {/snippet}
      {#snippet code()}

```html
<Accordion>
  <AccordionItem>
    ...
  </AccordionItem>
  <AccordionItem open>
    ...
  </AccordionItem>
</Accordion>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Standalone Mode">
    <Example>
      <p class="not-prose">The <code>Accordion</code> component comes with a <code>standalone</code> prop that controls how accordion items behave when they are opened or closed. This prop determines whether multiple items can remain open simultaneously or if only one item can stay open at a time.</p>
      <ul class="my-0">
        <li><b>Default Behavior (standalone: true)</b>: Only one accordion can remain open at a time within the group. Opening a new item will automatically close the currently open one.</li>
        <li><b>Multiple Open (standalone: false)</b>: Allows multiple accordion items in the group to remain open simultaneously.</li>
      </ul>
      {#snippet example()}
      <div>
        <Accordion standalone={false}>
          <AccordionItem title={accordionTitle + ": 1"}>
            {@html accordionContent}
          </AccordionItem>
          <AccordionItem title={accordionTitle + ": 2"}>
            {@html accordionContent}
          </AccordionItem>
          <AccordionItem title={accordionTitle + ": 3"}>
            {@html accordionContent}
          </AccordionItem>
        </Accordion>
      </div>
      {/snippet}
      {#snippet code()}

```html
<Accordion standalone={false}>
  <AccordionItem>
    ...
  </AccordionItem>
  ...
</Accordion>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Animation Speed">
    <Example>
      <p class="not-prose">The <code>animationSpeed</code> prop controls how fast the accordion opens and closes. Available values are <code>"none"</code>, <code>"slower"</code>, <code>"slow"</code>, <code>"normal"</code>, <code>"fast"</code> (default), and <code>"faster"</code>. It helps you control the overall feel of the Accordion, allowing for subtle or sharp transitions depending on your preference.</p>
      {#snippet example()}
      <div class="flex flex-col gap-4">
          <AccordionItem title="Animation speed: Slower" animationSpeed="slower">
            {@html accordionContent}
          </AccordionItem>
          <AccordionItem title="Animation speed: Slow" animationSpeed="slow">
            {@html accordionContent}
          </AccordionItem>
          <AccordionItem title="Animation speed: normal" animationSpeed="normal">
            {@html accordionContent}
          </AccordionItem>
          <AccordionItem title="Animation speed: fast" animationSpeed="fast">
            {@html accordionContent}
          </AccordionItem>
          <AccordionItem title="Animation speed: faster" animationSpeed="faster">
            {@html accordionContent}
          </AccordionItem>
          <AccordionItem title="Animation speed: none" animationSpeed="none">
            {@html accordionContent}
          </AccordionItem>
      </div>
      {/snippet}
      {#snippet code()}

```html
<AccordionItem ... animationSpeed="slower"> ... </AccordionItem>
<AccordionItem ... animationSpeed="slow"> ... </AccordionItem>
<AccordionItem ... animationSpeed="normal"> ... </AccordionItem>
<AccordionItem ... animationSpeed="fast"> ... </AccordionItem>
<AccordionItem ... animationSpeed="faster"> ... </AccordionItem>
<AccordionItem ... animationSpeed="none"> ... </AccordionItem>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Customization">
    <p class="not-prose">The accordion component in <b>theui-svelte</b> offers a wide range of style customization options through several props. These props let you apply custom classes to different parts of the accordion, ensuring it matches your design perfectly.</p>
    <Example title="Available Props for Customization">
      <ul>
        <li><span class="not-prose"><code>containerClasses</code></span>: Apply custom classes to the accordion's main container.</li>
        <li><span class="not-prose"><code>openContainerClasses</code></span>: Set custom classes for the container when the accordion is active (expanded).</li>
        <li><span class="not-prose"><code>contentClasses</code></span>: Define custom classes for the content section.</li>
        <li><span class="not-prose"><code>openContentClasses</code></span>: Specify classes for the content when it is active (visible).</li>
        <li><span class="not-prose"><code>titleClasses</code></span>: Customize the classes for the title of each accordion item.</li>
        <li><span class="not-prose"><code>openTitleClasses</code></span>: Apply specific classes to the title when the accordion is active (expanded).</li>
      </ul>
      {#snippet example()}
      <div>
        <AccordionItem
          containerClasses="border-4"
          openContainerClasses="border-4 border-brand-primary-600"
          titleClasses="text-brand-primary-500"
          openTitleClasses="text-brand-primary-700 bg-brand-primary-200"
          title={accordionTitle + ": 1"}>
          {@html accordionContent}
        </AccordionItem>
      </div>
      {/snippet}
      {#snippet code()}

```html
<AccordionItem
  containerClasses="border-4"
  openContainerClasses="border-4 border-brand-primary-600"
  titleClasses="text-brand-primary-500"
  openTitleClasses="text-brand-primary-700 bg-brand-primary-200"
>
</AccordionItem>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Accessibility">
    <div>
      <p class="not-prose">Our Accordion component is built with accessibility in mind, ensuring a seamless experience for all users, including those relying on assistive technologies. Below are the accessibility features implemented:</p>
      <ol class="my-0">
        <li>
          <b>Keyboard Navigation</b>
          <ul>
            <li>Use <kbd>tab</kbd> to navigate between headers.</li>
            <li>Use <kbd>Space</kbd> or <kbd>Enter</kbd> to toggle the expanded/collapsed state of an accordion item.</li>
          </ul>
        </li>
        <li>
          <b>ARIA Attributes</b>
          <ul>
            <li>The <span class="not-prose"><code>aria-expanded</code></span> attribute will be managed by the component itself for a properly accessible accordion.</li>
            <li>The <span class="not-prose"><code>aria-controls</code></span> links the header to its associated content.</li>
            <li>Each header and content has a unique <span class="not-prose"><code>id</code></span> for ARIA attributes.</li>
            <li>Hidden content uses <span class="not-prose"><code>aria-hidden="true"</code></span> when collapsed and <span class="not-prose"><code>aria-hidden="false"</code></span> when expanded.</li>
          </ul>
        </li>
        <li>
          <b>Focus Management</b>
          <ul>
            <li>The focus is retained on the header when toggling the accordion.</li>
            <li><span class="not-prose"><code>tabindex="0"</code></span> ensures all headers are keyboard-navigable.</li>
          </ul>
        </li>
        <li>
          <b>Screen Reader Compatibility</b>
          <ul>
            <li>Descriptive labels or headings can be added for better understanding.</li>
            <li>Semantic roles and ARIA attributes provide full support for assistive technologies.</li>
          </ul>
        </li>
      </ol>
    </div>
  </DocBlock>

  <DocBlock title="Configuration">
    <AccordionConfig title="Accordion" component={component.accordion} />
    <ItemConfig title="Accordion Item" component={component.item} />
  </DocBlock>

  {#snippet sidebar()}
    <a href={processID("Example")}>Example</a>
    <a href={processID("Accordion By Props")} class="ps-4">Title using prop</a>
    <a href={processID("Accordion Using Snippet")} class="ps-4">Title using snippet</a>
    <a href={processID("Group Accordion")}>Group accordion</a>
    <a href={processID("Flash Accordion")}>Flash accordion</a>
    <a href={processID("Accordion Size")}>Sizes</a>
    <!-- <a href={processID("Accordion Open State")}>Open state</a> -->
    <a href={processID("Accordion: Standalone Mode")}>Standalone mode</a>
    <a href={processID("Animation Speed")}>Animation Speed</a>
    <a href={processID("Customization")}>Customization</a>
    <a href={processID("Accessibility")}>Accessibility</a>
    <a href={processID("Configuration")}>Configuration</a>
    <a class="ps-4" href={processID("Accordion")}>Accordion</a>
    <a class="ps-4" href={processID("Accordion Item")}>Accordion item</a>
  {/snippet}
 
</DocLayout>