---
title: Breadcrumb
category: Components
description: Enhance navigation with theui-svelteâ€™s Breadcrumb component, guiding users through content hierarchy easily.
dir: ".lib/pages"
tags: [breadcrumb, navigation, component, svelte, svelte-5, theui-svelte, component-library, ui, tailwindcss]
---

<script lang="ts">
  import DocLayout from "$lib/ui/doc/DocLayout.svelte";
  import DocHead from "$lib/ui/doc/Head.svelte";
  import DocBlock from "$lib/ui/doc/Block.svelte";
  import Code from "$lib/ui/doc/CodeBlock.svelte";
  import Example from "$lib/ui/doc/Example.svelte";
  import ConfigComponent from "$lib/ui/doc/ConfigComponent.svelte";
  import { processID, editURL } from "$lib";
  let { component }: {component: any } = $props();

  import { Breadcrumb } from "theui-svelte";

  let breadcrumbData = [
    { text: "Home", url: "/" },
    { text: "About", url: "/about" },
    { text: "Company" }
  ];
</script>

<DocLayout>
  <DocHead title="Breadcrumb" text="The Breadcrumb component displays the location of the current page within a navigational hierarchy. It helps users understand the structure of your site and navigate back to previous pages easily." edit_url={editURL("breadcrumb")} />

  <DocBlock title="Example">
    <Example>
      <p class="not-prose">Start by importing the <code>Breadcrumb</code> component into your Svelte file, then pass it an array of breadcrumb items (like <a class="underline" href="/docs/types#breadcrumb-data-type">BREADCRUMB_DATA</a>) containing each item's text and URL. Here's a basic example:</p>
      {#snippet example()}
      <div class="w-full">
        <Breadcrumb data={breadcrumbData} />
      </div>
      {/snippet}
      {#snippet code()}

```html
<script>
  import { Breadcrumb } from "theui-svelte";

  let breadcrumbData: Array<BREADCRUMB_DATA> = [
    { text: "Home", url: "/" },
    { text: "About", url: "/about" },
    { text: "Company" }
  ]
</script>

<Breadcrumb data={breadcrumbData} />
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Change Link Separator">
    <p class="not-prose">You can customize the separator between breadcrumb links using the <code>separator</code> prop. The default separator is <code>/</code> and it can be overridden as shown below:</p>
    <Example>
      {#snippet example()}
          <div class="w-full">
            <Breadcrumb data={breadcrumbData} separator=">" />
          </div>
      {/snippet}
      {#snippet code()}

```html
<Breadcrumb data={breadcrumbData} separator=">" />
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Customization">
    <p class="not-prose">The <code>Breadcrumb</code> component offers flexibility for styling, allowing you to easily adapt it to match your design requirements.</p>
    <Example>
      <p class="not-prose">To customize the breadcrumb container itself, you can use the standard <code>class</code> attribute to apply custom styles. For further customization, there are two props designed to style the breadcrumb links:</p>
      <ul class="my-0">
        <li><span class="not-prose"><code>linkClasses</code></span>: This prop updates the appearance of the links within the breadcrumb.</li>
        <li><span class="not-prose"><code>activeLinkClasses</code></span>: This prop specifically targets the active link, enabling you to style it differently from the rest of the links.</li>
      </ul>
      {#snippet example()}
        <div class="w-full">
          <Breadcrumb 
            data={breadcrumbData} 
            activeLinkClasses="text-pink-500" 
            linkClasses="text-green-500" 
          />
        </div>
      {/snippet}
      {#snippet code()}

```html
<Breadcrumb 
  data={breadcrumbData} 
  activeLinkClasses="text-pink-500" 
  linkClasses="text-green-500" 
/>

```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Accessibility">
    <p class="not-prose">The <code>Breadcrumb</code> component is fully accessible, with <code>aria-label="breadcrumb"</code> applied to the navigation container to identify it as a breadcrumb trail for assistive technologies. Each link is keyboard-navigable, and the current page is marked with <code>aria-current="page"</code>. You only need to provide meaningful link labels and ensure proper color contrast for readability.
  </DocBlock>

  <DocBlock title="Configuration">
    <ConfigComponent {component} />
  </DocBlock>

  {#snippet sidebar()}
    <a href={processID("Example")}>Example</a>
    <a href={processID("Change Link Separator")}>Change Link Separator</a>
    <a href={processID("Customization")}>Customization</a>
    <a href={processID("Accessibility")}>Accessibility</a>
    <a href={processID("Configuration")}>Configuration</a>
  {/snippet}

</DocLayout>