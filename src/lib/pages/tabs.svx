---
title: Tabs
dir: ".lib/pages"
description: Organize content into navigable sections in your Svelte app with theui-svelte's Tabs and Pills component, ensuring a smooth UX.
---

<script lang="ts">
  import DocLayout from "$lib/ui/doc/DocLayout.svelte";
  import DocHead from "$lib/ui/doc/Head.svelte";
  import DocBlock from "$lib/ui/doc/Block.svelte";
  import Code from "$lib/ui/doc/CodeBlock.svelte";
  import Example from "$lib/ui/doc/Example.svelte";
  import ConfigComponent from "$lib/ui/doc/ConfigComponent.svelte";
  import { processID } from "$lib";
  let { component, edit_url }: {component: any, edit_url?: string } = $props();

  import { Tabs, Tab, TabPanel } from "theui-svelte";
</script>

<DocLayout>
  <DocHead title="Tabs" text="A simple and flexible way to organize content into multiple panels. It helps in structuring related information efficiently within a compact space." {edit_url}/>

  <DocBlock title="About">
    <p class="not-prose">The Tab component allows you to create navigable tabbed interfaces effortlessly. It dynamically manages tab switching while keeping the content structured and accessible. Highly customizable, it supports different layouts, active states, and styling options, making it ideal for presenting information in a clean and user-friendly manner.</p>
  </DocBlock>

  <DocBlock title="Example">
    <Example>
      <p class="not-prose">Below is an example of how to implement the Tabs component in your Svelte project. Each tab is linked to a specific content panel, and when you click a tab, the respective content is displayed.</p>
      {#snippet example()}
      <div class="w-full">
        <Tabs>
          {#snippet tabList()}
            <Tab>Tab 1</Tab>
            <Tab>Tab 2</Tab>
            <Tab>Tab 3</Tab>
          {/snippet}
          {#snippet tabPanel()}
            <TabPanel>TabPanel 1</TabPanel>
            <TabPanel>TabPanel 2</TabPanel>
            <TabPanel>TabPanel 3</TabPanel>
          {/snippet}
        </Tabs>
      </div>
      {/snippet}

      {#snippet code()}
```html
<script>
  import { Tabs, Tab, TabPanel } from "theui-svelte";
</script>

<Tabs>
  {#snippet tabList()}
    <Tab>Tab 1</Tab>
    <Tab>Tab 2</Tab>
    <Tab>Tab 3</Tab>
  {/snippet}
  {#snippet tabPanel()}
    <TabPanel>TabPanel 1</TabPanel>
    <TabPanel>TabPanel 2</TabPanel>
    <TabPanel>TabPanel 3</TabPanel>
  {/snippet}
</Tabs>
```
      {/snippet}
    </Example>
    <ul class="my-0">
      <li>The <span class="not-prose"><code>Tabs</code></span> component wraps both the <span class="not-prose"><code>Tab</code></span> and <span class="not-prose"><code>TabPanel</code></span> components.</li>
      <li>Each <span class="not-prose"><code>Tab</code></span> corresponds to a specific <span class="not-prose"><code>TabPanel</code></span>, and clicking on a tab will show the associated content.</li>
    </ul>
  </DocBlock>

  <DocBlock title="Variant">
    <Example>
      <p class="not-prose">The <code>variant</code> prop allows you to customize the style of the tabs. It accepts two values: <code>"tabs"</code> and <code>"pills"<code>.</p>
      <ul class="my-0">
        <li><span class="not-prose"><code>"tabs"</code></span>: Displays the tabs in a traditional horizontal layout with square or rectangular edges.</li>
        <li><span class="not-prose"><code>"pills"</code></span>: Displays the tabs with rounded edges, giving them a pill-like appearance.</li>
      </ul>
      <p class="not-prose">By default, the <code>variant</code> is set to <code>"pills"</code>, giving the tabs a rounded pill-like design. You can change this to <code>"tabs"</code> if you prefer a more classic tab design with square edges.</p>
      {#snippet example()}
      <div class="w-full">
        <Tabs variant="tabs">
          {#snippet tabList()}
            <Tab>Tab 1</Tab>
            <Tab>Tab 2</Tab>
            <Tab>Tab 3</Tab>
          {/snippet}
          {#snippet tabPanel()}
            <TabPanel>TabPanel 1</TabPanel>
            <TabPanel>TabPanel 2</TabPanel>
            <TabPanel>TabPanel 3</TabPanel>
          {/snippet}
        </Tabs>
      </div>
      {/snippet}

      {#snippet code()}
```html
<Tabs variant="tabs"> ... </Tabs>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Customization">
    <p class="not-prose">The <code>Tabs</code> component is highly customizable, allowing you to tailor its appearance and behavior to fit your design needs. You can adjust various parts of the component using the following props:</p>
    <ul class="my-0">
      <li><span class="not-prose"><code>"borderClasses"</code></span>: This prop controls the border of the tabs. By default, it is set to <code>true</code>, which applies the default border style. You can pass a custom class or a <code>boolean</code> value to either enable or disable the border.
        <ul>
          <li><span class="not-prose"><code>true</code> (default)</span>: Applies the default border.</li>
          <li><span class="not-prose"><code>false</code></span>: Disables the border.</li>
          <li><span class="not-prose"><code>string</code></span>: You can pass a custom class for border styling.</li>
        </ul>
        <Example>

      {#snippet code()}
```html
<Tabs borderClasses="border-gray-300"> ... </Tabs>
```
      {/snippet}
        </Example>
      </li>
      <li><span class="not-prose"><code>"tabListClasses"</code></span>: This prop allows you to customize the tab list container. You can pass any valid Tailwind or custom class to modify the appearance of the tab list.
        <Example>

      {#snippet code()}
```html
<Tabs tabListClasses="flex space-x-4"> ... </Tabs>
```
      {/snippet}
        </Example>
      </li>
      <li><span class="not-prose"><code>"tabClasses"</code></span>: Customize the individual tabs with this prop. Pass any custom classes to adjust the style of each tab element.
        <Example>

      {#snippet code()}
```html
<Tabs tabClasses="text-gray-700 hover:text-blue-500"> ... </Tabs>
```
      {/snippet}
        </Example>
      </li>
      <li><span class="not-prose"><code>"activeTabClasses"</code></span>: This prop lets you define the appearance of the active tab. By default, it applies the active tab style, but you can use this prop to apply custom classes for the active tab.
        <Example>

      {#snippet code()}
```html
<Tabs activeTabClasses="bg-blue-500 text-white"> ... </Tabs>
```
      {/snippet}
        </Example>
      </li>
      <li><span class="not-prose"><code>"tabPanelClasses"</code></span>: Use this prop to customize the style of the tab panels. You can pass custom classes for margin, padding, background color, or any other styling.
        <Example>

      {#snippet code()}
```html
<Tabs tabPanelClasses="p-4 bg-gray-100"> ... </Tabs>
```
      {/snippet}
        </Example>
      </li>
    </ul>
  </DocBlock>

  <DocBlock title="Accessibility">
  </DocBlock>

  <DocBlock title="Configuration">
    <ConfigComponent component={component} />
  </DocBlock>

  {#snippet sidebar()}
    <a href={processID("About")}>About</a>
    <a href={processID("Example")}>Example</a>
    <a href={processID("Variant")}>Variant</a>
    <a href={processID("Customization")}>Customization</a>
    <a href={processID("Accessibility")}>Accessibility</a>
    <a href={processID("Configuration")}>Configuration</a>
  {/snippet}
</DocLayout>