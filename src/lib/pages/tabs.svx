---
title: Tabs
dir: ".lib/pages"
description: Organize content into navigable sections in your Svelte app with theui-svelte's Tabs and Pills component, ensuring a smooth UX.
---

<script lang="ts">
  import DocLayout from "$lib/ui/doc/DocLayout.svelte";
  import DocHead from "$lib/ui/doc/Head.svelte";
  import DocBlock from "$lib/ui/doc/Block.svelte";
  import Code from "$lib/ui/doc/CodeBlock.svelte";
  import Example from "$lib/ui/doc/Example.svelte";
  import ConfigComponent from "$lib/ui/doc/ConfigComponent.svelte";
  import { processID, editURL } from "$lib";
  let { component }: {component: any } = $props();

  import { Tabs, Tab, TabPanel } from "theui-svelte";
</script>

{#snippet T()}
  <Tab>Tab 1</Tab>
  <Tab>Tab 2</Tab>
  <Tab>Tab 3</Tab>
{/snippet}

{#snippet P()}
  <TabPanel>TabPanel 1</TabPanel>
  <TabPanel>TabPanel 2</TabPanel>
  <TabPanel>TabPanel 3</TabPanel>
{/snippet}

<DocLayout>
  <DocHead title="Tabs" text="A simple and flexible way to organize content into multiple panels. It helps in structuring related information efficiently within a compact space." edit_url={editURL("tabs")} />

  <DocBlock title="About">
    <p class="not-prose">The Tab component allows you to create navigable tabbed interfaces effortlessly. It dynamically manages tab switching while keeping the content structured and accessible. Highly customizable, it supports different layouts, active states, and styling options, making it ideal for presenting information in a clean and user-friendly manner.</p>
  </DocBlock>

  <DocBlock title="Example">
    <Example>
      <p class="not-prose">Below is an example of how to implement the Tabs component in your Svelte project. Each tab is linked to a specific content panel, and when you click a tab, the respective content is displayed.</p>
      {#snippet example()}
      <div class="w-full">
        <Tabs>
          {#snippet tabs()}
            {@render T()}
          {/snippet}
          {@render P()}
        </Tabs>
      </div>
      {/snippet}

      {#snippet code()}
```html
<script>
  import { Tabs, Tab, TabPanel } from "theui-svelte";
</script>

<Tabs>
  {#snippet tabs()}
    <Tab>Tab 1</Tab>
    <Tab>Tab 2</Tab>
    <Tab>Tab 3</Tab>
  {/snippet}
  <TabPanel>TabPanel 1</TabPanel>
  <TabPanel>TabPanel 2</TabPanel>
  <TabPanel>TabPanel 3</TabPanel>
</Tabs>
```
      {/snippet}
    </Example>
    <ul class="my-0">
      <li>The <span class="not-prose"><code>Tabs</code></span> component wraps both the <span class="not-prose"><code>Tab</code></span> and <span class="not-prose"><code>TabPanel</code></span> components.</li>
      <li>Each <span class="not-prose"><code>Tab</code></span> corresponds to a specific <span class="not-prose"><code>TabPanel</code></span>, and clicking on a tab will show the associated content.</li>
    </ul>
  </DocBlock>

  <DocBlock title="Variant">
    <Example>
      <p class="not-prose">The <code>variant</code> prop allows you to customize the style of the tabs. It accepts two values: <code>"tabs"</code> and <code>"pills"<code>.</p>
      <ul class="my-0">
        <li><span class="not-prose"><code>"tabs"</code></span>: Displays the tabs in a traditional horizontal layout with square or rectangular edges.</li>
        <li><span class="not-prose"><code>"pills"</code></span>: Displays the tabs with rounded edges, giving them a pill-like appearance.</li>
      </ul>
      <p class="not-prose">By default, the <code>variant</code> is set to <code>"pills"</code>, giving the tabs a rounded pill-like design. You can change this to <code>"tabs"</code> if you prefer a more classic tab design with square edges.</p>
      {#snippet example()}
      <div class="w-full">
        <Tabs variant="tabs">
          {#snippet tabs()}
            {@render T()}
          {/snippet}
          {@render P()}
        </Tabs>
      </div>
      {/snippet}

      {#snippet code()}
```html
<Tabs variant="tabs"> ... </Tabs>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Customization">
    <p class="not-prose">The <code>Tabs</code> component is highly customizable, allowing you to tailor its appearance and behavior to fit your design needs. You can adjust various parts of the component using the following props:</p>
    <div>
      <Example title="Border Customization">
        <p class="not-prose">The <code>"border"</code> prop controls the border of the tabs. By default, it is set to <code>true</code>, which applies the default border style. You can pass a custom class or a <code>boolean</code> value to either enable or disable the border.</p>
        <ul class="mt-0">
          <li><span class="not-prose"><code>true</code> (default)</span>: Applies the default border.</li>
          <li><span class="not-prose"><code>false</code></span>: Disables the border.</li>
          <li><span class="not-prose"><code>string</code></span>: You can pass a custom class for border styling.</li>
        </ul>
        {#snippet example()}
          <div class="w-full">
            <Tabs border="border-b-4 border-brand-primary-300">
              {#snippet tabs()}
                {@render T()}
              {/snippet}
              {@render P()}
            </Tabs>
          </div>
        {/snippet}

        {#snippet code()}
```html
<!-- Custom border classes -->
<Tabs border="border-b-4 border-brand-primary-300"> ... </Tabs>
```
        {/snippet}
      </Example>
      <Example title="Customize the Tab Container">
        <p class="not-prose">The <code>"tabContainerClasses"</code> prop allows you to customize the tab list container. You can pass any valid Tailwind or custom class to modify the appearance of the tab list.</p>
        {#snippet example()}
          <div class="w-full">
            <Tabs tabContainerClasses="flex justify-center">
              {#snippet tabs()}
                {@render T()}
              {/snippet}
              {@render P()}
            </Tabs>
          </div>
        {/snippet}

        {#snippet code()}
```html
<Tabs tabContainerClasses="flex justify-center"> ... </Tabs>
```
        {/snippet}
      </Example>

      <Example title="Tab Customization">
        <p class="not-prose">To customize the tabs, use <code>"tabClasses"</code> ans <code>"tabActiveClasses"</code> props. The <code>"tabClasses"</code> prop applies to all tabs, while the <code>"tabActiveClasses"</code> prop is applied only to the active tab, overriding the styles from <code>"tabClasses"</code>.</p>
        {#snippet example()}
          <div class="w-full">
            <Tabs tabClasses="text-gray-500 hover:text-blue-500" tabActiveClasses="bg-blue-800 text-blue-50 hover:text-blue-200">
              {#snippet tabs()}
                {@render T()}
              {/snippet}
              {@render P()}
            </Tabs>
          </div>
        {/snippet}

        {#snippet code()}
```html
<Tabs
  tabClasses="text-gray-500 hover:text-blue-500"
  tabActiveClasses="bg-blue-800 text-blue-50 hover:text-blue-200"
>
  ...
</Tabs>
```
        {/snippet}
      </Example>

      <Example title="Panel Customization">
        <p class="not-prose">You can use the <code>"tabPanelClasses"</code> prop to customize the style of the tab panels. You can pass custom classes for margin, padding, background color, or any other styling.</p>
        {#snippet example()}
          <div class="w-full">
            <Tabs tabPanelClasses="p-4 bg-brand-primary-100">
              {#snippet tabs()}
                {@render T()}
              {/snippet}
              {@render P()}
            </Tabs>
          </div>
        {/snippet}

        {#snippet code()}
```html
<Tabs tabPanelClasses="p-4 bg-gray-100"> ... </Tabs>
```
        {/snippet}
      </Example>

      <Example title="Customize Individual Component">
        <p class="not-prose">If you want to customize a specific <code>Tab</code> or <code>TabPanel</code> or event the <code>Tabs</code> component, you can use the native <code>class</code> attribute with that component. </p>
        {#snippet example()}
          <div class="w-full">
            <Tabs class="border-2 border-yellow-500 py-2 px-4 rounded-lg">
              {#snippet tabs()}
                <Tab>Tab 1</Tab>
                <Tab class="font-bold text-2xl">Tab 2</Tab>
                <Tab>Tab 3</Tab>
              {/snippet}
              <TabPanel>TabPanel 1</TabPanel>
              <TabPanel class="bg-yellow-100 p-4">TabPanel 2</TabPanel>
              <TabPanel>TabPanel 3</TabPanel>
            </Tabs>
          </div>
        {/snippet}

        {#snippet code()}
```html
<Tabs class="border-2 border-yellow-500 py-2 px-4 rounded-lg">
  {#snippet tabs()}
    <Tab>Tab 1</Tab>
    <Tab class="font-bold text-2xl">Tab 2</Tab>
    <Tab>Tab 3</Tab>
  {/snippet}
  <TabPanel>TabPanel 1</TabPanel>
  <TabPanel class="bg-yellow-100 p-4">TabPanel 2</TabPanel>
  <TabPanel>TabPanel 3</TabPanel>
</Tabs>
```
        {/snippet}
      </Example>
    </div>
    <p class="not-prose">In the example above, the native <code>class</code> attribute is applied to the <code>Tabs</code> component, the second <code>Tab</code>, and the second <code>Tabpanel</code>.</p>
  </DocBlock>

  <DocBlock title="Accessibility">
    <p class="not-prose">The <code>Tabs</code> component follows the <a href="https://www.w3.org/WAI/ARIA/apg/patterns/tabs/" target="blank">WAI-ARIA Tabs Pattern</a> to ensure a seamless experience for all users, including those using assistive technologies.</p>
    <ol class="my-0">
      <li><b class="font-semi-bold">Built-in Accessibility Features</b>: The component includes essential ARIA attributes and roles:
        <ul>
          <li><span class="not-prose"><code>role="tablist"</code></span> for the container that holds all tabs.</li>
          <li><span class="not-prose"><code>role="tab"</code></span> for each tab with <span class="not-prose"><code>aria-selected="true"</code></span> on the active one.</li>
          <li><span class="not-prose"><code>role="tabpanel"</code></span> for each content section with <span class="not-prose"><code>aria-labelledby</code></span> linking it to its respective tab.</li>
        </ul>
        These attributes allow screen readers to interpret and navigate the component correctly.
      </li>
      <li><b class="font-semi-bold">Keyboard Navigation</b>: Users can navigate between tabs using <kbd>Tab</kbd> key, and activate a tab with <kbd>Enter</kbd> or <kbd>Space</kbd>. The active tab remains focusable, ensuring smooth interaction without extra actions.</li>
      <li><b class="font-semi-bold">Customization Considerations</b>: When applying custom styles, ensure <b>focus indicators</b> remain visible, <b>contrast is sufficient</b>, and <b>animations do not disrupt usability</b>, particularly for users with motion sensitivity.</li>
    </ol>
    <p class="not-prose">By following these best practices, the Tabs component provides an inclusive and accessible experience.</p>
  </DocBlock>

  <DocBlock title="Configuration">
    <ConfigComponent {component} />
  </DocBlock>

  {#snippet sidebar()}
    <a href={processID("About")}>About</a>
    <a href={processID("Example")}>Example</a>
    <a href={processID("Variant")}>Variant</a>
    <a href={processID("Customization")}>Customization</a>
    <a href={processID("Border Customization")} class="ps-4">Border Customization</a>
    <a href={processID("Customize the Tab Container")} class="ps-4">Tab Container</a>
    <a href={processID("Tab Customization")} class="ps-4">Tab Customization</a>
    <a href={processID("Panel Customization")} class="ps-4">Panel Customization</a>
    <a href={processID("Customize Individual Component")} class="ps-4">Individual Component</a>
    <a href={processID("Accessibility")}>Accessibility</a>
    <a href={processID("Configuration")}>Configuration</a>
  {/snippet}
</DocLayout>