---
title: Chips
dir: ".lib/pages"
description: Implement interactive and stylish chips in your Svelte app with TheUI-Svelte's Chips component, perfect for tags and filters.
---

<script lang="ts">
  import DocLayout from "$lib/ui/doc/DocLayout.svelte";
  import DocHead from "$lib/ui/doc/Head.svelte";
  import DocBlock from "$lib/ui/doc/Block.svelte";
  import Code from "$lib/ui/doc/CodeBlock.svelte";
  import Example from "$lib/ui/doc/Example.svelte";
  import ConfigComponent from "$lib/ui/doc/ConfigComponent.svelte";
  import { processID, editURL } from "$lib";
  let { component }: {component: any } = $props();

  import { Chips } from "theui-svelte";
</script>

<DocLayout>
  <DocHead title="Chips" text="The <code>Chips</code> component is a versatile UI element used to display small blocks of information, such as tags, categories, or interactive items. It supports images, text, and an optional close button for dismissing the chips." edit_url={editURL("chips")} />

  <DocBlock title="Example">
    <p class="not-prose">First, import the <code>Chips</code> component from the library. Below is a simple example demonstrating how to use the Chips component. This example shows how to create a chip with a basic text label:</p>
    <Example>
      {#snippet example()}
      <div>
        <Chips>Example Chips</Chips>
      </div>
      {/snippet}

      {#snippet code()}
```html
<script>
  import { Chips } from "theui-svelte";
</script>

<Chips>Example Chips</Chips>
```
      {/snippet}
    </Example>
    <p class="not-prose">In this example the <code>Chips</code> component is used with the text prop which creates a chip displaying the text "Example Chips".</p>
  </DocBlock>

  <DocBlock title="Chips With Image">
    <p class="not-prose">You can enhance the <code>Chips</code> component by including an image alongside the text. Below is a basic example demonstrating how to use the Chips component with an image:</p>
    <Example>
      {#snippet example()}
      <div>
        <Chips imageUrl="https://randomuser.me/api/portraits/women/66.jpg">Jasmine Kira</Chips>
      </div>
      {/snippet}

      {#snippet code()}
```html
<Chips imageUrl="/path/to/image.png">...</Chips>
```
      {/snippet}
    </Example>
    <p class="not-prose">The <code>imageUrl</code> prop specifies the path to the image ("/path/to/image.png"), adding an image to the chip.</p>
  </DocBlock>

  <DocBlock title="Disable Close Button">
    <p class="not-prose">The <code>Chips</code> component includes a close button by default, allowing users to dismiss the chip. This is controlled by the <code>close</code> prop, which is set to <code>true</code> by default. If you prefer not to display the close button, you can disable it by setting the <code>close</code> prop to <code>false</code>.</p>
    <Example>
      {#snippet example()}
      <div>
        <Chips imageUrl="/assets/img/theui-logo.png" close={false}>Example Chips</Chips>
      </div>
      {/snippet}

      {#snippet code()}
```html
<Chips close={false}>...</Chips>
```
      {/snippet}
    </Example>
    <p class="not-prose">The <code>imageUrl</code> prop specifies the path to the image ("/path/to/image.png"), adding an image to the chip.</p>
  </DocBlock>

  <DocBlock title="Sizes">
    <p class="not-prose">The <code>Chips</code> component allows you to adjust its size using the <code>size</code> prop. This prop controls the padding and dimensions of the chip, including any accompanying image. The available size options are:<br>- <b>sm</b> (small)<br>- <b>md</b> (medium) â€“ <i>default</i><br>- <b>lg</b> (large)</p>
    <p class="not-prose">By choosing the appropriate size, you can ensure that the chips fit seamlessly into your design. This flexibility helps you customize the appearance of chips to suit various layout needs.</p>
    <Example>
      {#snippet example()}
        <div class="flex flex-col items-center gap-4">
        <Chips imageUrl="https://randomuser.me/api/portraits/women/66.jpg" size="sm">Jasmine Kira</Chips>
        <Chips imageUrl="https://randomuser.me/api/portraits/women/66.jpg" size="md">Jasmine Kira</Chips>
        <Chips imageUrl="https://randomuser.me/api/portraits/women/66.jpg" size="lg">Jasmine Kira</Chips>
        </div>
      {/snippet}

      {#snippet code()}
```html
<Chips size="sm">...</Chips>
<Chips size="md">...</Chips>
<Chips size="lg">...</Chips>
```
      {/snippet}
    </Example>
    <p class="not-prose">The <code>imageUrl</code> prop specifies the path to the image ("/path/to/image.png"), adding an image to the chip.</p>
  </DocBlock>

  <DocBlock title="Rounded Corner">
    <p class="not-prose">The <code>rounded</code> prop in the <code>Chips</code> component controls its border radius. Values: <code>none</code>, <code>sm</code>, <code>md</code>, <code>lg</code>, <code>xl</code>, <code>full</code>. Default is <code>full</code>.</p>
    <Example>
      {#snippet example()}
        <div class="flex flex-col items-center gap-4">
        <Chips imageUrl="https://randomuser.me/api/portraits/women/65.jpg" rounded="none">Jasmine Kira</Chips>
        <Chips imageUrl="https://randomuser.me/api/portraits/women/66.jpg" rounded="md">Jasmine Kira</Chips>
        <Chips imageUrl="https://randomuser.me/api/portraits/women/67.jpg" rounded="lg">Jasmine Kira</Chips>
        <Chips imageUrl="https://randomuser.me/api/portraits/women/68.jpg" rounded="xl">Jasmine Kira</Chips>
        <Chips imageUrl="https://randomuser.me/api/portraits/women/69.jpg" rounded="full">Jasmine Kira</Chips>
        </div>
      {/snippet}

      {#snippet code()}
```html
<Chips rounded="none">...</Chips>
<Chips rounded="md">...</Chips>
<Chips rounded="lg">...</Chips>
<Chips rounded="xl">...</Chips>
<Chips rounded="full">...</Chips>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Customization">
    <p class="not-prose">The <code>Chips</code> component offers extensive customization options using Tailwind CSS classes. You can easily style both the chip and the accompanying image by applying custom classes through the <code>class</code> and <code>imageClasses</code> props.</p>
    <Example title="Chip Customization">
      <p class="not-prose">To customize the chip's appearance, use the <code>class</code> prop to add your own Tailwind CSS classes. This allows you to control the border, background, padding, and more.</p>
      {#snippet example()}
      <div>
        <Chips class="border border-red-500 bg-yellow-200">Custom Chip</Chips>
      </div>
      {/snippet}

      {#snippet code()}
```html
<Chips class="border border-red-500 bg-yellow-200">Custom Chip</Chips>
```
      {/snippet}
    </Example>
    <Example title="Image Customization">
      <p class="not-prose">Similarly, you can style the image within the chip using the <code>imageClasses</code> prop. This lets you apply specific styles like borders, padding, and background to the image.</p>
      {#snippet example()}
      <div>
        <Chips imageUrl="https://randomuser.me/api/portraits/women/66.jpg" imageClasses="border-2 border-brand-primary-500">Jasmine Kira</Chips>
      </div>
      {/snippet}

      {#snippet code()}
```html
<Chips imageClasses="border border-brand-primary-500">...</Chips>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Accessibility">
    <p class="not-prose">The <code>Chips</code> component supports accessibility best practices. When an image is used, it includes proper <code>alt</code> text for screen readers. If the <code>close</code> prop is enabled, the close button includes an <code>aria-label</code> to describe its action, allowing users to remove chips with assistive technologies. The component maintains proper semantics and structure for clear navigation and interaction.</p>
  </DocBlock>

  <DocBlock title="Configuration">
    <ConfigComponent {component} />
  </DocBlock>

  {#snippet sidebar()}
    <a href={processID("Example")}>Example</a>
    <a href={processID("Chips With Image")}>Chips With Image</a>
    <a href={processID("Disable Close Button")}>Disable Close Button</a>
    <a href={processID("Sizes")}>Sizes</a>
    <a href={processID("Customization")}>Customization</a>
    <a href={processID("Chip Customization")} class="ps-4">Chip customization</a>
    <a href={processID("Image Customization")} class="ps-4">Image customization</a>
    <a href={processID("Accessibility")}>Accessibility</a>
    <a href={processID("Configuration")}>Configuration</a>
  {/snippet}
</DocLayout>