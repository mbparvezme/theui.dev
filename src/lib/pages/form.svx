---
title: Form
dir: ".lib/pages"
description: A reusable wrapper for the HTML <form> element, simplifying form creation, submission handling, and event management.
---

<script lang="ts">
  import DocLayout from "$lib/ui/doc/DocLayout.svelte";
  import DocHead from "$lib/ui/doc/Head.svelte";
  import DocBlock from "$lib/ui/doc/Block.svelte";
  import Code from "$lib/ui/doc/CodeBlock.svelte";
  import Example from "$lib/ui/doc/Example.svelte";
  import ConfigComponent from "$lib/ui/doc/ConfigComponent.svelte";
  import { processID, editURL } from "$lib";
  let { component }: {component: any } = $props();
</script>

<DocLayout>
  <DocHead title="Form" text="A reusable wrapper for the HTML form element, simplifying form creation, submission handling, event management and controlling all the inputs from a single place." edit_url={editURL("form")} />

  <DocBlock title="About">
    <p class="not-prose">The <code>Form</code> component is a reusable wrapper for the native HTML <code>&lt;form&gt;</code> element, designed to simplify form creation and management. While itâ€™s not mandatory to use this component for every form, its primary benefit lies in centralizing control over input styles and common behaviors. By using the Form component, you can ensure consistent styling and functionality across all forms in your application, making it easier to maintain and update them from a single place.</p>
  </DocBlock>

  <DocBlock title="Example">
    <Example>
      <p class="not-prose">To use the <b>Form</b> component, simply import it from the library and wrap your form inputs inside it. Here's a basic example:</p>
      {#snippet code()}

```html
<script>
  import { Form } from "theui-svelte";
</script>

<Form>
  <!-- Add your form inputs here -->
</Form>
```
      {/snippet}
    </Example>
    <p class="not-prose">The component ensures consistent styling and behavior for all child inputs, making it easier to manage forms across your application.</p>
  </DocBlock>

  <DocBlock title="Form Method">
    <Example>
      <p class="not-prose">The <code>method</code> prop specifies the HTTP method to be used when the form is submitted. It corresponds to the native HTML <code>method</code> attribute of the <b>&lt;form&gt;</b> element. Available values are <code>GET</code> and <code>POST</code>. Default <code>POST</code>.</p>
      {#snippet code()}

```html
<Form method="GET">
  <!-- Form inputs go here -->
</Form>
```
      {/snippet}
    </Example>
      <p class="not-prose">In this example, the form will use the <code>GET</code> method when submitted, appending the form data to the URL. If no <code>method</code> is specified, it defaults to <code>POST</code>.</p>
  </DocBlock>

  <DocBlock title="Accessibility">
    <p class="not-prose">The <code>Form</code> component uses the native <code>&lt;form&gt;</code> element, which is already accessible by default. It supports all <b>ARIA</b> roles, labels, and attributes via props, ensuring that keyboard navigation and screen readers can interact with it without extra configuration. This makes it easy to use for all users, including those with disabilities.</p>
  </DocBlock>

  <DocBlock title="Configuration">
    <p class="not-prose">The <code>Form</code> component includes a set of props that are not directly applied to the form itself but are passed down to all its child inputs. These props ensure a consistent appearance and behavior across all form inputs, making it easier to maintain uniformity without manually configuring each input.</p>
    <ConfigComponent {component} />
  </DocBlock>

  {#snippet sidebar()}
    <a href={processID("About")}>About</a>
    <a href={processID("Example")}>Example</a>
    <a href={processID("Form Method")}>Form Method</a>
    <a href={processID("Accessibility")}>Accessibility</a>
    <a href={processID("Configuration")}>Configuration</a>
  {/snippet}


</DocLayout>