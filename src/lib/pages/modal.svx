---
title: Modal
dir: ".lib/pages"
description: Integrate customizable modals into your Svelte app with TheUI-Svelte's Modal component, perfect for dialogs and pop-ups.
---

<script lang="ts">
  import DocLayout from "$lib/ui/doc/DocLayout.svelte";
  import DocHead from "$lib/ui/doc/Head.svelte";
  import DocBlock from "$lib/ui/doc/Block.svelte";
  import Code from "$lib/ui/doc/CodeBlock.svelte";
  import Example from "$lib/ui/doc/Example.svelte";
  import ConfigComponent from "$lib/ui/doc/ConfigComponent.svelte";
  import { processID } from "$lib";
  let { component, edit_url }: {component: any, edit_url?: string } = $props();

  import { Modal, Button } from "theui-svelte";
</script>

<DocLayout>
  <DocHead title="Modal" text="The Modal component provides a flexible and customizable way to display overlay content, perfect for dialogs, alerts, or any content that requires user interaction without leaving the current page." {edit_url}/>

  <DocBlock title="About">
    <p class="not-prose">Modals are versatile UI elements used to present important information or interactive content in a focused overlay. They help keep users engaged by keeping the main interface visible in the background while drawing attention to the modal content. The Modal component in theui-svelte offers various customization options, including animations, backdrops, and event handling, ensuring it fits seamlessly into your application's design and functionality.</p>
  </DocBlock>

  <DocBlock title="Example">
    <Example>
      <p class="not-prose">To use the Modal component, you need to import it into your Svelte file. This setup allows you to easily integrate the Modal component into your project.</p>
      {#snippet example()}
      <div>
        <Modal>
          {#snippet trigger()}
            <Button label="Modal Button" />
          {/snippet}
          Hello Modal!
        </Modal>
      </div>
      {/snippet}

      {#snippet code()}
```html
<script>
  import { Modal } from "theui-svelte";
</script>

<Modal label="Modal">
  Hello Modal!
</Modal>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Modal Trigger">
    <p class="not-prose">The Modal trigger is the element that opens the Modal when clicked. You can create this trigger using either the <code>label</code> prop or the <code>label</code> snippet. The label prop generates a default button with the provided text, making it simple to open the Modal. Alternatively, the label snippet lets you customize the trigger with any element or component, giving you more flexibility.</p>
    <Example title="Trigger with the label prop" codeTitle="label as prop">
      {#snippet code()}

```html
<Modal label="Modal Trigger"> ... </Modal>
```
      {/snippet}
    </Example>
    <Example title="Trigger with the label snippet" codeTitle="label as snippet">
      {#snippet code()}

```html
<Modal>
  {#snippet trigger()}
    <Button label="Modal Trigger" />
  {/snippet}
  ...
</Modal>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Modal Content">
    <Example>
      <p class="not-prose">The content placed directly inside the <code>&lt;Modal&gt;</code> tag will be displayed as the main body of the Modal. Additionally, the Modal component supports two snippet blocks for custom header and footer content: <code>header</code> and <code>footer</code>.</p>
      <ul class="my-0">
        <li>The <span class="not-prose"><code>header</code></span> snippet is used to define the header section of the Modal.</li>
        <li>The <span class="not-prose"><code>footer</code></span> snippet is used to define the footer section of the Modal.</li>
      </ul>
      {#snippet example()}
        <Modal>
          {#snippet trigger()}
            <Button label="Modal Content" />
          {/snippet}

          {#snippet header()}
            <h4 class="font-bold text-lg">THIS IS HEADER!</h4>
          {/snippet}

          Modal content!

          {#snippet footer()}
            <p class="text-muted">This is footer</p>
          {/snippet}
        </Modal>
      {/snippet}
      {#snippet code()}

```html
<Modal label="Modal Content">
  {#snippet header()}
    <h4 class="font-bold text-lg">THIS IS HEADER!</h4>
  {/snippet}

  Modal content!

  {#snippet footer()}
    <p class="text-muted">This is footer</p>
  {/snippet}
</Modal>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Positioning">
    <Example>
      <p class="not-prose">The <code>position</code> prop in the Modal component determines where the modal is displayed vertically on the screen. It can be set to <code>'top'</code>, <code>'center'</code>, or <code>'bottom'</code>, with the default being <code>'center'</code>. This allows you to align the modal according to your design needs, whether you want it at the top for quick alerts, in the center for standard dialogs, or at the bottom for additional content.</p>
      {#snippet example()}
      <div>
        <Modal position="top">
          {#snippet trigger()}
            <Button label="Top Modal" />
          {/snippet}
          Top-aligned Modal
        </Modal>

        <Modal position="center">
          {#snippet trigger()}
            <Button label="Center Modal" />
          {/snippet}
          Centered Modal (default)
        </Modal>

        <Modal position="bottom">
          {#snippet trigger()}
            <Button label="Modal Modal" />
          {/snippet}
          Bottom-aligned Modal
        </Modal>
      </div>
      {/snippet}

      {#snippet code()}
```html
<!-- Top-aligned Modal -->
<Modal position="top"> ... </Modal>

<!-- Centered Modal (Default) -->
<Modal position="center"> ... </Modal>

<!-- Bottom-aligned Modal -->
<Modal position="bottom"> ... </Modal>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Sizing">
    <Example>
      <p class="not-prose">The <code>size</code> prop controls the width of the Modal. Options include <code>'sm'</code> for small, <code>'md'</code> for medium (default), <code>'lg'</code> for large, and <code>'full'</code> for full-screen. This allows you to adjust the modal size based on your content needs.</p>
      {#snippet example()}
      <div>
        <Modal size="sm">
          {#snippet trigger()}
            <Button label="Small Modal" />
          {/snippet}
          Small size modal
        </Modal>

        <Modal size="md">
          {#snippet trigger()}
            <Button label="Medium Modal" />
          {/snippet}
          Medium size modal
        </Modal>

        <Modal size="lg">
          {#snippet trigger()}
            <Button label="Large Modal" />
          {/snippet}
          Large size modal
        </Modal>

        <Modal size="full">
          {#snippet trigger()}
            <Button label="Full Modal" />
          {/snippet}
          Full screen modal
        </Modal>
      </div>
      {/snippet}

      {#snippet code()}
```html
<!-- Small Modal -->
<Modal size="sm"> ... </Modal>

<!-- Medium-sized Modal (default) -->
<Modal size="md"> ... </Modal>

<!-- Large Modal -->
<Modal size="lg"> ... </Modal>

<!-- Full-width Modal -->
<Modal size="full"> ... </Modal>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Animation">
    <Example title="Animation Type">
      <p class="not-prose">The <code>animation</code> prop defines the type of animation used when the Modal opens or closes. Available options include <code>'slide-down'</code>, <code>'slide-up'</code>, <code>'fade'</code>, <code>'zoom-in'</code>, and <code>'zoom-out'</code>. Each option provides a different visual effect for how the Modal appears or disappears.</p>
      {#snippet example()}
      <div>
        <Modal animation="slide-down">
          {#snippet trigger()}
            <Button label="Slide Down" />
          {/snippet}
          Modal with slide-down animation
        </Modal>
        <Modal animation="slide-up">
          {#snippet trigger()}
            <Button label="Slide Up" />
          {/snippet}
          Modal with slide-up animation
        </Modal>
        <Modal>
          {#snippet trigger()}
            <Button label="Fade (default)" />
          {/snippet}
          Modal with fade animation
        </Modal>
        <Modal>
          {#snippet trigger()}
            <Button label="Zoom-in" />
          {/snippet}
          Modal with zoom-in animation
        </Modal>
        <Modal>
          {#snippet trigger()}
            <Button label="Zoom-out" />
          {/snippet}
          Modal with zoom-out animation
        </Modal>
      </div>
      {/snippet}

      {#snippet code()}
```html
<!-- Modal with slide-down animation -->
<Modal animation="slide-down"> ... </Modal>

<!-- Modal with slide-up animation -->
<Modal animation="slide-up"> ... </Modal>

<!-- Modal with fade (default) animation -->
<Modal animation="fade"> ... </Modal>

<!-- Modal with zoom-in animation -->
<Modal animation="zoom-in"> ... </Modal>

<!-- Modal with zoom-out animation -->
<Modal animation="zoom-out"> ... </Modal>
```
      {/snippet}
    </Example>

    <Example title="Animation Speed">
      <p class="not-prose">The <code>animate</code> prop controls the speed of the Modal's animation. It accepts the following values: <code>false</code>, <code>'slower'</code>, <code>'slow'</code>, <code>'normal'</code>, <code>'fast'</code>, and <code>'faster'</code>. Setting this prop to false will disable the animation, while the other values adjust the animation speed accordingly.</p>
      {#snippet example()}
      <div>
        <Modal animation="slide-down" animate="slower">
          {#snippet trigger()}
            <Button label="Slower" />
          {/snippet}
          Modal with slide-down animation
        </Modal>
        <Modal animation="slide-down" animate="slow">
          {#snippet trigger()}
            <Button label="Slow" />
          {/snippet}
          Modal with slide-down animation
        </Modal>
        <Modal animation="slide-down" animate="normal">
          {#snippet trigger()}
            <Button label="Normal (Default)" />
          {/snippet}
          Modal with slide-down animation
        </Modal>
        <Modal animation="slide-down" animate="fast">
          {#snippet trigger()}
            <Button label="Fast" />
          {/snippet}
          Modal with slide-down animation
        </Modal>
        <Modal animation="slide-down" animate="faster">
          {#snippet trigger()}
            <Button label="Faster" />
          {/snippet}
          Modal with slide-down animation
        </Modal>
        <Modal animation="slide-down" animate={false}>
          {#snippet trigger()}
            <Button label="No animation" />
          {/snippet}
          Modal with slide-down animation
        </Modal>
      </div>
      {/snippet}

      {#snippet code()}
```html
<!-- Modal with slower animation -->
<Modal animate="slower"> ... </Modal>

<!-- Modal with slow animation -->
<Modal animate="slow"> ... </Modal>

<!-- Modal with normal speed (default) animation -->
<Modal animate="normal"> ... </Modal>

<!-- Modal with fast animation -->
<Modal animate="fast"> ... </Modal>

<!-- Modal with faster animation -->
<Modal animate="faster"> ... </Modal>

<!-- Modal with no animation -->
<Modal animate={false}> ... </Modal>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Modal Backdrop">
    <Example title="Static Backdrop">
      <p class="not-prose">The <code>staticBackdrop</code> prop controls whether the Modal closes when clicking on the backdrop. By default, the backdrop is clickable, and clicking it will close the Modal. Setting <code>staticBackdrop</code> to <code>true</code> makes the backdrop static, meaning the Modal will remain open even when the backdrop is clicked.</p>
      {#snippet example()}
      <div>
        <Modal staticBackdrop={true}>
          {#snippet trigger()}
            <Button label="Static Backdrop Modal" />
          {/snippet}
          Modal with static backdrop!
        </Modal>
      </div>
      {/snippet}

      {#snippet code()}
```html
<Modal staticBackdrop={true}> ... </Modal>
```
      {/snippet}
    </Example>

    <Example title="Backdrop Customization">
      <p class="not-prose">The <code>backdrop</code> prop manages the visibility and style of the Modal's backdrop. When set to <code>true</code> (default), the backdrop is visible. If set to <code>false</code>, the backdrop will be hidden. You can also customize the backdrop by passing custom CSS classes, which will apply directly to the backdrop.</p>
      {#snippet example()}
      <div>
        <Modal backdrop={false}>
          {#snippet trigger()}
            <Button label="Modal Without Backdrop" />
          {/snippet}
           Modal with no backdrop
        </Modal>
        <Modal backdrop="bg-brand-primary-500/30">
          {#snippet trigger()}
            <Button label="Modal Without Backdrop" />
          {/snippet}
           Modal with no backdrop
        </Modal>
      </div>
      {/snippet}

      {#snippet code()}
```html
<!-- Modal with no backdrop -->
<Modal  backdrop={false}> ... </Modal>

<!-- Modal with custom styled backdrop -->
<Modal backdrop="bg-brand-primary-500/30"> ... </Modal>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Disable Close Button">
    <Example>
      <p class="not-prose">The <code>closeButton</code> prop allows you to control the visibility of the close button in the Modal. By default, the close button is hidden (<code>false</code>). Set this prop to <code>true</code> to display the close button, giving users an easy way to close the modal.</p>
      {#snippet example()}
      <div>
        <Modal closeBtn={false}>
          {#snippet trigger()}
            <Button label="Modal Button" />
          {/snippet}
          Modal without close button!
        </Modal>
      </div>
      {/snippet}

      {#snippet code()}
```html
<Modal closeButton={false}> ... </Modal>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Modal Open State">
    <Example>
      <p class="not-prose">The <code>modalOpen</code> prop controls whether the Modal is visible when the page loads. By default, <code>modalOpen</code> is set to <code>false</code>, meaning the Modal is hidden initially. If you set <code>modalOpen</code> to <code>true</code>, the Modal will be open and visible as soon as the page loads.</p>
      {#snippet example()}
        <Button label="View example" href="/example/modal-open-state" target="_blank" />
      {/snippet}

      {#snippet code()}
```html
<Modal modalOpen={true}> ... </Modal>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Customization">
    <p class="not-prose">To create a custom-styled modal, you can use the following props to apply custom classes to the modal's header, body, footer, and outer container:</p>
    <ul class="my-0">
      <li><span class="not-prose"><code>modalOuterClasses</code></span>: Customize the outer container of the modal.</li>
      <li><span class="not-prose"><code>modalHeaderClasses</code></span>: Customize the header section of the modal.</li>
      <li><span class="not-prose"><code>modalBodyClasses</code></span>: Customize the body section of the modal.</li>
      <li><span class="not-prose"><code>modalFooterClasses</code></span>: Customize the footer section of the modal.</li>
    </ul>
    <p class="not-prose">These props allow you to apply your own styles or use TailwindCSS classes to control the layout and appearance of different parts of the modal.</p>

    <Example>
      {#snippet example()}
    <Modal 
      modalFooterClasses="bg-gray-800 text-white p-4"
      modalHeaderClasses="bg-blue-500 text-white p-4"
      modalBodyClasses="p-6 bg-white"
      modalOuterClasses="rounded-lg shadow-lg"
    >
      {#snippet trigger()}
        <Button label="Modal Button" />
      {/snippet}

      {#snippet header()}
        <h4 class="text-lg font-bold">Custom Modal Header</h4>
      {/snippet}

      <p>This is the body of the custom modal.</p>

      {#snippet footer()}
        <button class="btn btn-primary">Close</button>
      {/snippet}
    </Modal>
      {/snippet}

      {#snippet code()}
```html
<Modal 
  modalFooterClasses="bg-gray-800 text-white p-4"
  modalHeaderClasses="bg-blue-500 text-white p-4"
  modalBodyClasses="p-6 bg-white"
  modalOuterClasses="rounded-lg shadow-lg"
>
  {#snippet trigger()}
    <Button label="Modal Button" />
  {/snippet}

  {#snippet header()}
    <h4 class="text-lg font-bold">Custom Modal Header</h4>
  {/snippet}

  <p>This is the body of the custom modal.</p>

  {#snippet footer()}
    <button class="btn btn-primary">Close</button>
  {/snippet}
</Modal>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Configuration">
    <ConfigComponent component={component} />
  </DocBlock>

  {#snippet sidebar()}
    <a href={processID("About")}>About</a>
    <a href={processID("Example")}>Example</a>
    <a href={processID("Modal Trigger")}>Modal Trigger</a>
    <a href={processID("Modal Content")}>Modal Content</a>
    <a href={processID("Positioning")}>Positioning</a>
    <a href={processID("Sizing")}>Sizing</a>
    <a href={processID("Animation")}>Animation</a>
    <a href={processID("Animation Type")} class="ps-4">Animation type</a>
    <a href={processID("Animation Speed")} class="ps-4">Animation speed</a>
    <a href={processID("Modal Backdrop")}>Modal Backdrop</a>
    <a href={processID("Static Backdrop")} class="ps-4">Static Backdrop</a>
    <a href={processID("Backdrop Customization")} class="ps-4">Customizing Backdrop</a>
    <a href={processID("Disable Close Button")}>Disable Close Button</a>
    <a href={processID("Modal Open State")}>Modal Open State</a>
    <a href={processID("Customization")}>Customization</a>
    <a href={processID("Configuration")}>Configuration</a>
  {/snippet}
</DocLayout>