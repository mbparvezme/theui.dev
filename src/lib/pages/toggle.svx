---
title: Toggle
dir: ".lib/pages"
description: Fully customizable switch that can replace traditional checkboxes and radio buttons.
---

<script lang="ts">
  import DocLayout from "$lib/ui/doc/DocLayout.svelte";
  import DocHead from "$lib/ui/doc/Head.svelte";
  import DocBlock from "$lib/ui/doc/Block.svelte";
  import Code from "$lib/ui/doc/CodeBlock.svelte";
  import Example from "$lib/ui/doc/Example.svelte";
  import ConfigComponent from "$lib/ui/doc/ConfigComponent.svelte";
  import { processID } from "$lib";
  let { component, edit_url }: {component: any, edit_url?: string } = $props();

  import { Toggle, Alert } from "theui-svelte";
</script>

<DocLayout>
  <DocHead title="Toggle" text="Fully customizable switch that can replace traditional checkboxes and radio buttons." {edit_url}/>

  <DocBlock title="About">
    <p class="not-prose">The <code>Toggle</code> component provides a modern and user-friendly way to handle Boolean inputs in forms. It supports labels, customizable styling, and works seamlessly with checkboxes and radio button types. The component is fully accessible and integrates well with different UI requirements.</p>
  </DocBlock>

  <DocBlock title="Example">
    <Example>
      <p class="not-prose">The Toggle component can be used in various ways depending on your needs. Below is a basic example:</p>
      {#snippet example()}
<Toggle name="toggle">Enable Feature</Toggle>
      {/snippet}
      {#snippet code()}

```html
<script>
  import { Toggle } from "theui-svelte";
</script>

<Toggle name="toggle">Enable Feature</Toggle>
```
      {/snippet}
    </Example>
    <p class="not-prose">You can use it in forms, settings panels, or anywhere a simple on/off switch is required. The component adapts well to different themes and sizes, making it versatile for various UI designs.</p>
  </DocBlock>

  <DocBlock title="Toggle Type">
    <Example>
      <p class="not-prose">The <code>type</code> prop defines whether the toggle functions as a checkbox or a radio button.</p>
      {#snippet example()}
<div class="flex flex-col w-1/2 text-start">
  <h4 class="font-bold">Checkboxes</h4>
  <Toggle name="toggle1">Checkbox 1</Toggle>
  <Toggle name="toggle2">Checkbox 2</Toggle>
</div>
<div class="flex flex-col w-1/2">
  <h4 class="font-bold">Radio buttons</h4>
  <Toggle name="toggle3" type="radio">Radio button 1</Toggle>
  <Toggle name="toggle3" type="radio">Radio button 2</Toggle>
</div>
      {/snippet}
      {#snippet code()}

```html
<!-- Checkbox (default) -->
<Toggle name="toggle1" type="checkbox">Checkbox 1</Toggle>
<Toggle name="toggle2" type="checkbox">Checkbox 2</Toggle>

<!-- Radio buttons -->
<Toggle name="toggle3" type="radio">Radio button 1</Toggle>
<Toggle name="toggle3" type="radio">Radio button 2</Toggle>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Name and Value">
    <Example>
      <p class="not-prose">The <code>name</code> and <code>value</code> props are crucial for form handling, especially when using the Toggle component as a <b>checkbox</b> or <b>radio button</b>.</p>
      <ul>
        <li>The <span class="not-prose"><code>name</code> prop is required for radio buttons to group multiple toggles under the same name, allowing only one to be selected at a time.</li>
        <li>The <span class="not-prose"><code>value</code></span> prop controls the toggle's state and can be <span class="not-prose"><code>true</code></span>, <span class="not-prose"><code>false</code></span>, or <span class="not-prose"><code>null</code></span>. When used as a radio button, the value represents the selected option.</li>
      </ul>
      {#snippet example()}
        <div class="flex flex-col gap-4">
          <Toggle name="preferences" value="ok">Enable Notifications</Toggle>
          <div class="flex flex-col">
            <h3 class="font-bold">Gender</h3>
            <div class="flex flex-row gap-4">
            <Toggle name="gender" type="radio" value="male">Male</Toggle>
            <Toggle name="gender" type="radio" value="female">Female</Toggle>
            </div>
          </div>
        </div>
      {/snippet}
      {#snippet code()}

```html
<!-- Toggle with custom ID -->
<Toggle name="preferences" type="checkbox" value="ok">Enable Notifications</Toggle>
<Toggle name="theme" type="radio" value="dark">Dark Mode</Toggle>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Toggle Sizes">
    <Example>
      <p class="not-prose">The <code>size</code> prop controls the dimensions of the toggle switch, allowing it to fit various UI designs. Whether you need a compact switch for minimal layouts or a larger one for better accessibility, the <code>size</code> prop provides flexibility. Available sizes are: <code>sm</code>, <code>md</code> (default), <code>lg</code> and <code>xl</code>.</p>
      {#snippet example()}
<div class="flex flex-col gap-1">
  <Toggle name="toggle" size="sm">Small (sm) toggle</Toggle>
  <Toggle name="toggle" size="md">Medium (md) toggle</Toggle>
  <Toggle name="toggle" size="lg">Large (lg) toggle</Toggle>
  <Toggle name="toggle" size="xl">Extra large (xl) toggle</Toggle>
</div>
      {/snippet}
      {#snippet code()}

```html
<Toggle name="toggle" size="sm">Small (sm) toggle</Toggle>
<Toggle name="toggle" size="md">Medium (md) toggle</Toggle>
<Toggle name="toggle" size="lg">Large (lg) toggle</Toggle>
<Toggle name="toggle" size="xl">Extra large (xl) toggle</Toggle>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Animation">
    <Example>
      <p class="not-prose">The <code>animateSpeed</code> prop controls the transition effect when toggling between states. Smooth animations enhance the user experience by making interactions feel more natural. Available values are: <code>slower</code>, <code>slow</code>, <code>normal</code> (default), <code>fast</code> and <code>faster</code>.</p>
      {#snippet example()}
<div class="flex flex-col">
  <Toggle name="toggle" animateSpeed="slower">Slower animation</Toggle>
  <Toggle name="toggle" animateSpeed="slow">Slow animation</Toggle>
  <Toggle name="toggle" animateSpeed="normal">Normal animation</Toggle>
  <Toggle name="toggle" animateSpeed="fast">Fast animation</Toggle>
  <Toggle name="toggle" animateSpeed="faster">Faster animation</Toggle>
  <Toggle name="toggle" animateSpeed="none">No animation</Toggle>
</div>
      {/snippet}
      {#snippet code()}

```html
<Toggle name="toggle" animateSpeed="slower">Slower animation</Toggle>
<Toggle name="toggle" animateSpeed="slow">Slow animation</Toggle>
<Toggle name="toggle" animateSpeed="normal">Normal animation</Toggle>
<Toggle name="toggle" animateSpeed="fast">Fast animation</Toggle>
<Toggle name="toggle" animateSpeed="faster">Faster animation</Toggle>
<Toggle name="toggle" animateSpeed="none">No animation</Toggle>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Rounded Toggle">
    <Example>
      <p class="not-prose">The <code>rounded</code> prop defines the shape of the toggle’s switch and background. By adjusting this property, you can make the toggle appear more circular or squared. Available values are: <code>sm</code>, <code>md</code>, <code>lg</code>, <code>xl</code>, <code>full</code> (default) and <code>none</code>.</p>
      {#snippet example()}
<div class="flex flex-col gap-2">
  <Toggle name="toggle" size="xl" rounded="sm">Small rounded</Toggle>
  <Toggle name="toggle" size="xl" rounded="md">Medium rounded</Toggle>
  <Toggle name="toggle" size="xl" rounded="lg">Large rounded</Toggle>
  <Toggle name="toggle" size="xl" rounded="xl">Extra large rounded</Toggle>
  <Toggle name="toggle" size="xl" rounded="full">Full rounded</Toggle>
  <Toggle name="toggle" size="xl" rounded="none">Not rounded</Toggle>
</div>
      {/snippet}
      {#snippet code()}

```html
<Toggle name="toggle" label="Small rounded" size="xl" rounded="sm" />
<Toggle name="toggle" label="Medium rounded" size="xl" rounded="md" />
<Toggle name="toggle" label="Large rounded" size="xl" rounded="lg" />
<Toggle name="toggle" label="Extra large rounded" size="xl" rounded="xl" />
<Toggle name="toggle" label="Full rounded" size="xl" rounded="full" />
<Toggle name="toggle" label="Not rounded" size="xl" rounded="none" />
```
      {/snippet}
    </Example>
    <Alert type="info" theme="soft">Note: The "xl" size is used for better visibility, making the toggle more prominent and easier to interact with.</Alert>
  </DocBlock>

  <DocBlock title="Customization">
    <p class="not-prose">The <code>Toggle</code> component offers flexibility in styling through the <code>labelClasses</code>, <code>wrapperClasses</code>, and <code>class</code> props, allowing you to adjust the appearance of both the label and the toggle’s outer container.</p>
    <p class="not-prose"><code>class</code><br>The <code>class</code> attribute can be used to apply custom styles directly to the toggle input. This gives you full control over its appearance, making it easy to align with your design system.</p>
    <p class="not-prose"><code>wrapperClasses</code><br>The <code>wrapperClasses</code> prop lets you apply custom styles to the main wrapper &lt;div&gt;. By default, it is an empty string, meaning no additional styles are applied unless specified.</p>
    <p class="not-prose"><code>labelClasses</code><br>The <code>labelClasses</code> prop is primarily inherited from the parent <b>Form</b> component (if available), ensuring consistent styling across form elements. However, you can override it to apply custom styles to the label as needed.</p>
    <Example>
      {#snippet example()}
      <Toggle
        labelClasses="text-red-500 font-bold"
        wrapperClasses="shadow-xl py-2 px-4 bg-gray-100 dark:bg-gray-800 rounded-full"
        class="bg-blue-200 checked:hover:bg-green-500 checked:focus:bg-green-500 checked:bg-green-500 focus:!ring-gray-500 checked:focus:!ring-green-500"
      >
        CUSTOM TOGGLE
      </Toggle>
      {/snippet}
      {#snippet code()}

```html
<Toggle
  labelClasses="text-red-500 font-bold"
  wrapperClasses="shadow-xl py-2 px-4 bg-gray-100 dark:bg-gray-800 rounded-full"
  class="bg-blue-200 checked:hover:bg-green-500 checked:focus:bg-green-500 checked:bg-green-500 focus:!ring-gray-500 checked:focus:!ring-green-500"
>
  CUSTOM TOGGLE
</Toggle>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Accessibility">
    <p class="not-prose">The Toggle component is more than just good looks — it's smart, too. With built-in <code>role="switch"</code> and dynamic <code>aria-checked</code>, screen readers instantly know whether it's on or off. Whether you're using it as a checkbox or a radio button, it adapts and communicates its state clearly. The linked label and responsive design ensure a smooth, accessible toggle every time.</p>
  </DocBlock>

  <DocBlock title="Configuration">
    <ConfigComponent {component} />
  </DocBlock>

  {#snippet sidebar()}
    <a href={processID("About")}>About</a>
    <a href={processID("Example")}>Example</a>

    <a href={processID("Toggle Type")}>Toggle Type</a>
    <a href={processID("Label")}>Label</a>
    <a href={processID("Name and Value")}>Name and Value</a>
    <a href={processID("Toggle Sizes")}>Toggle Sizes</a>
    <a href={processID("Animation")}>Animation</a>
    <a href={processID("Rounded Toggle")}>Rounded Toggle</a>
    <a href={processID("Customization")}>Customization</a>
    <a href={processID("Accessibility")}>Accessibility</a>
    <a href={processID("Configuration")}>Configuration</a>
  {/snippet}


</DocLayout>