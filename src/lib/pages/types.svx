---
title: Type definition
dir: ".lib/pages"
description: Understand the various component types in TheUI-Svelte. Learn how to use them effectively to build a versatile and robust Svelte application.
---

<script lang="ts">
  import DocLayout from "$lib/ui/doc/DocLayout.svelte"
  import DocHead from "$lib/ui/doc/Head.svelte"
  import DocBlock from "$lib/ui/doc/Block.svelte"
  import Code from "$lib/ui/doc/CodeBlock.svelte"
  import { processID, editURL } from "$lib"
  let { components }: {components: any } = $props()
</script>

<DocLayout>

  <DocHead title="Types" text="This components library utilizing Typescript to define the types of the configurations of the components." edit_url={editURL("types")} />

  <DocBlock title="Animation Speed Type">
<Code title="Typescript">

```ts
type ANIMATE_SPEED = undefined  | false | "slower" | "slow" | "normal" | "fast" | "faster";
```
</Code>
  </DocBlock>

  <DocBlock title="Rounded Type">
<Code title="Typescript">

```ts
type ROUNDED = "sm" | "md" | "lg" | "xl" | "full" | "none" | undefined;
```
</Code>
  </DocBlock>

  <DocBlock title="Shadow Types">
<Code title="Typescript">

```ts
type SHADOW = "sm" | "md" | "lg" | "xl" | "2xl" | "inner" | "none" | undefined;
```
</Code>
  </DocBlock>

  <DocBlock title="Accordion Size">
<Code title="Typescript">

```ts
type ACCORDION_SIZE = "compact" | "default" | "large"
```
</Code>
  </DocBlock>

  <DocBlock title="Breadcrumb Data Type">
<Code title="Typescript">

```ts
type BREADCRUMB_DATA = Array<{ text: string; url?: string }>;
```
</Code>
  </DocBlock>

  <!-- <DocBlock title="SEO Component">
<Code title="SEO component data type">

```ts
type SEO_DATA = {
    siteName: string; // Available via .env
    pageTitle: string;
    description: string;
    keywords?: string;
    logoPath?: string; // Available via .env
    imgPath?: string;
    siteLang?: string; // Available via .env
    businessSchema?: string;
    siteSchema?: string;
    pageSchema?: string;
    pageType?: string;
    video?: string;
    gtmCode?: string; // Available via .env
};
```
</Code>
  </DocBlock> -->

  <DocBlock title="Button Size Type">
<Code title="Typescript">

```ts
type BUTTON_SIZE = "xs" | "sm" | "md" | "lg" | "xl" | "0";
```
</Code>
  </DocBlock>

  <DocBlock title="Card Image Type">
<Code title="Typescript">

```ts
type CARD_IMAGE_TYPE = {
    class?: string,
    src ?: string,
    alt ?: string,
    [key: string]: unknown
}
```
</Code>
  </DocBlock>

  <DocBlock title="Dropdown Item Types">
<Code title="Typescript">

```ts
// Dropdown item type
    type?: "link" | "divider" | "header";
```
</Code>
  </DocBlock>

  <DocBlock title="Dropdown Preload Type">
<Code title="Typescript">

```ts
type PRELOAD = false | "off" | "tap" | "hover";
```
</Code>
  </DocBlock>

  <DocBlock title="Navbar Scroll Behavior Type">
<Code title="Typescript">

```ts
type NAV_SCROLL_BEHAVIOR = 'default' | 'fixed' | 'shrinkOnScrollDown' | 'hideOnScrollDown' | 'shrinkAndHide'
```
</Code>
  </DocBlock>

  <DocBlock title="Notification Position">
<Code title="Typescript">

```ts
type NOTIFICATION_POSITION = "top-end" | "top-center" | "top-start" | "bottom-end" | "bottom-center" | "bottom-start"
```
</Code>
  </DocBlock>

  <DocBlock title="Placement">
<Code title="Typescript">

```ts
type Placement = "top" | "right" | "bottom" | "left" | "top-start" | "top-end" | "right-start" | "right-end" | "bottom-start" | "bottom-end" | "left-start" | "left-end"
```
</Code>
  </DocBlock>

  <DocBlock title="Notification Types">
<Code title="Typescript">

```ts
// Notification configuration type
type NOTIFY_CONFIG = {
  removeAfter?: number;
  removeOnClick?: boolean;
  rounded: ROUNDED;
  variant: "card" | "cardLight" | "borderTop" | "borderBottom" | "borderStart";
};

// Types of Notification
type NOTIFICATION_TYPE = "error" | "info" | "success" | "warning";
```
</Code>
  </DocBlock>

  <DocBlock title="Table Data Type">
<Code title="Type definition">

```ts
type TABLE_CONFIG = {
    animationSpeed: ANIMATE_SPEED;
    border: "x" | "y" | "both" | "none";
    borderColor: string;
    hover: boolean | string;
    space: "compact" | "default" | "comfortable" | string;
    stripe: boolean | string;
    trClass: string;
}
```
</Code>
  </DocBlock>

  <DocBlock title="Input Variant Type">
<Code title="Typescript">

```ts
type INPUT_VARIANT = "bordered" | "filled" | "flat";

```
</Code>
  </DocBlock>

  <DocBlock title="Input Size Type">
<Code title="Typescript">

```ts
type INPUT_SIZE = "sm" | "md" | "lg" | "xl";

```
</Code>
  </DocBlock>

  <DocBlock title="Input-Type Type">
<Code title="Typescript">

```ts
type INPUT_TYPE = 'color' | 'date' | 'datetime-local' | 'email' | 'file' | 'hidden' | 'image' | 'month' | 'number' | 'password' | 'reset' | 'submit' | 'tel' | 'text' | 'time' | 'url' | 'week' | 'search';

```
</Code>
  </DocBlock>

  <DocBlock title="Select Data Type">
<Code title="Type definition">

```ts
type SELECT_DATA = Array<{ disabled?: boolean, selected?: boolean, text: string, value?: any } | string>;
```
</Code>
  </DocBlock>

  {#snippet sidebar()}
    <a href={processID("Common Types")}>Animation speed type</a>
    <a href={processID("Rounded Type")}>Rounded type</a>
    <a href={processID("Shadow Types")}>Shadow types</a>
    <a href={processID("Accordion Size")}>Accordion size</a>
    <a href={processID("Breadcrumb Data Type")}>Breadcrumb data type</a>
    <a href={processID("Button Size Type")}>Button size type</a>
    <a href={processID("Card Image Type")}>Card image type</a>
    <a href={processID("Dropdown Item Types")}>Dropdown item types</a>
    <a href={processID("Dropdown Preload Type")}>Dropdown preload type</a>
    <a href={processID("Navbar Scroll Behavior Type")}>Navbar scroll behavior type</a>
    <a href={processID("Notification Position")}>Notification position</a>
    <a href={processID("Placement")}>Placement</a>
    <a href={processID("Notification Types")}>Notification types</a>
    <a href={processID("Table Data Type")}>Table data type</a>
    <a href={processID("Input Variant Type")}>Input variant type</a>
    <a href={processID("Input Size Type")}>Input size type</a>
    <a href={processID("Input-Type Type")}>Input-type type</a>
    <a href={processID("Select Data Type")}>Select data type</a>
    <a href={processID("")}></a>
    <a href={processID("")}></a>
    <a href={processID("")}></a>
  {/snippet}

</DocLayout>