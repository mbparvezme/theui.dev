---
title: Dropdown
dir: ".lib/pages"
description: 
---

<script lang="ts">
  import DocLayout from "$lib/ui/doc/DocLayout.svelte";
  import DocHead from "$lib/ui/doc/Head.svelte";
  import DocBlock from "$lib/ui/doc/Block.svelte";
  import Code from "$lib/ui/doc/CodeBlock.svelte";
  import Example from "$lib/ui/doc/Example.svelte";
  import DropdownConfig from "$lib/ui/doc/ConfigComponent.svelte";
  import ItemConfig from "$lib/ui/doc/ConfigComponent.svelte";
  import { processID } from "$lib";
  let { component, edit_url }: {component: any, edit_url?: string } = $props();

  import { Dropdown, DropdownItem, Svg, Badge } from "theui-svelte";
</script>

{#snippet dropdownBasic()}
  <DropdownItem url="/">Link 1</DropdownItem>
  <DropdownItem url="/">Link 2</DropdownItem>
  <DropdownItem url="/">Link 3</DropdownItem>
{/snippet}

<DocLayout>
  <DocHead title="Dropdown" text="The Dropdown component offers a flexible and customizable way to display a list of links or actions in a compact, toggle-able menu. It's perfect for navigation menus, settings, or any context where you want to provide users with multiple options in a clean, organized format." {edit_url}/>

  <DocBlock title="About">
    <p class="not-prose">The Dropdown component allows you to create a menu that can be expanded or collapsed by clicking or hovering over a trigger element. It supports various customization options such as alignment, animation styles, animation speeds, and trigger events. Each item within the Dropdown can be linked to different actions or URLs, making it a versatile tool for enhancing user interaction in your application.</p>
  </DocBlock>

  <DocBlock title="Example">
    <p class="not-prose">To use the Dropdown component in your project, you first need to import it along with the DropdownItem component. Here's how you can set up the Dropdown in your Svelte component.</p>
    <Example>
      <p class="not-prose">Hereâ€™s a simple example of how to implement the Dropdown component. It includes a label and multiple DropdownItem components, which represent the individual links or actions within the dropdown.</p>
      {#snippet example()}
      <div>
        <Dropdown label="Dropdown">
          {@render dropdownBasic()}
        </Dropdown>
      </div>
      {/snippet}

      {#snippet code()}
```html
<script>
  import { Dropdown, DropdownItem } from "theui-svelte";
</script>

<Dropdown label="Dropdown">
  <DropdownItem url="/">Link 1</DropdownItem>
  <DropdownItem url="/">Link 2</DropdownItem>
  <DropdownItem url="/">Link 3</DropdownItem>
</Dropdown>
```
      {/snippet}
    </Example>
    <p class="not-prose">In this example, the Dropdown is triggered by a label ("Dropdown"), and it contains three items, each with a URL and text.</p>
  </DocBlock>

  <DocBlock title="Dropdown Sizing">
    <Example>
      <p class="not-prose">The width of the Dropdown component can be customized using the <code>width</code> prop. You can choose from predefined sizes or set a custom width to suit your design needs. Here's a breakdown of the available options:</p>
      <ul class="my-0">
        <li><b>auto</b>: The Dropdown will automatically adjust its size based on its content.</li>
        <li><b>sm</b>: A small size for compact dropdowns.</li>
        <li><b>md</b>: The default medium size for a standard dropdown.</li>
        <li><b>lg</b>: A large size for more prominent dropdowns.</li>
        <li><b>full</b>: The dropdown will take up the full width of its container.</li>
        <li><b>custom</b>: Use this option when you want to set a custom size for the dropdown through additional styling.</li>
      </ul>
      {#snippet example()}
      <div class="flex justify-between w-full flex-wrap gap-y-4">
        <Dropdown label="Auto" width="auto">
          {@render dropdownBasic()}
        </Dropdown>
        <Dropdown label="Small" width="sm">
          {@render dropdownBasic()}
        </Dropdown>
        <Dropdown label="Medium" width="md">
          {@render dropdownBasic()}
        </Dropdown>
        <Dropdown label="Large" width="lg">
          {@render dropdownBasic()}
        </Dropdown>
        <Dropdown label="Full width" width="full">
          {@render dropdownBasic()}
        </Dropdown>
        <Dropdown label="Custom" width="custom">
          {@render dropdownBasic()}
        </Dropdown>
      </div>
      {/snippet}

      {#snippet code()}
```html
<!-- Automatically adjusts the size based on content -->
<Dropdown size="auto"> ... </Dropdown>

<!-- Small dropdown -->
<Dropdown size="sm"> ... </Dropdown>

<!-- Default medium size dropdown -->
<Dropdown size="md"> ... </Dropdown>

<!-- Large dropdown -->
<Dropdown size="lg"> ... </Dropdown>

<!-- Full-width dropdown -->
<Dropdown size="full"> ... </Dropdown>

<!-- Custom size dropdown (you can set custom styles) -->
<Dropdown size="custom"> ... </Dropdown>

```
      {/snippet}
    </Example>
    <p class="not-prose">In these examples, the <code>size</code> prop allows you to quickly adjust the appearance of the dropdown to fit different design needs.</p>
  </DocBlock>

  <DocBlock title="Alignment">
    <Example>
      <p class="not-prose">The <code>align</code> prop in the Dropdown component controls the alignment of the dropdown menu relative to its trigger. You can choose between two options:</p>
      <ul class="my-0">
        <li><b>start</b>: Aligns the dropdown to the start (left) of the trigger element.</li>
        <li><b>end</b>: Aligns the dropdown to the end (right) of the trigger element. This is the default alignment.</li>
      </ul>
      {#snippet example()}
      <div class="flex justify-between w-full">
        <Dropdown label="Align to Start" align="start">
          {@render dropdownBasic()}
        </Dropdown>
        <Dropdown label="Align to End (Default)">
          {@render dropdownBasic()}
        </Dropdown>
      </div>
      {/snippet}

      {#snippet code()}
```html
<!-- Align dropdown to the start (left) of the trigger -->
<Dropdown align="start"> ... </Dropdown>

<!-- Default alignment (align to the right of the trigger) -->
<Dropdown align="end"> ... </Dropdown>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Dropdown Trigger Event">
    <p class="not-prose">The <code>dropdownEvent</code> prop defines how the dropdown is triggered. By default, the dropdown opens when clicked, but you can change this behavior to trigger on hover by setting it to <code>"hover"</code>.</p>
    <Example>
      {#snippet example()}
      <div>
        <Dropdown label="Dropdown on hover" dropdownEvent="hover">
          {@render dropdownBasic()}
        </Dropdown>
      </div>
      {/snippet}

      {#snippet code()}
```html
<Dropdown dropdownEvent="hover"> ... </Dropdown>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Custom Dropdown Trigger">
    <Example>
      <p class="not-prose">The <code>label</code> prop allows you to set a custom label for the dropdown trigger. You can either use a text or HTML string or define a custom trigger element using the <code>snippet</code> block.</p>
      <ul class="my-0">
        <li><b>label as props</b>: Directly set the trigger label as a prop.</li>
        <li><b>label as snippet</b>: Define a custom trigger with any HTML or component structure.</li>
      </ul>
      {#snippet example()}
      <div>
        <Dropdown label="Dropdown text label">
          {@render dropdownBasic()}
        </Dropdown>

        <Dropdown>
          {#snippet label()}
          <span class="block border border-brand-primary-500 text-brand-primary-500 py-2 px-4 rounded-full">Dropdown snippet label</span>
          {/snippet}
          {@render dropdownBasic()}
        </Dropdown>
      </div>
      {/snippet}

      {#snippet code()}
```html
<!-- Dropdown label by prop -->
<Dropdown label="Dropdown text label"> ... </Dropdown>

<!-- Custom dropdown label by Snippet -->
<Dropdown>
  {#snippet label()}
    <span class="...">Dropdown snippet label</span>
  {/snippet}
</Dropdown>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Item Types">
    <Example title="Link">
      <p class="not-prose">The <code>DropdownItem</code> component supports four native types for consistent UI: link, button, header, and divider. The type of each item is controlled by the <code>type</code> prop, which defaults to <code>link</code>. The <code>type</code> prop can be set to <code>'link' | 'divider' | 'header' | 'button'</code>.</p>
      <ul class="my-0">
        <li><b>link</b>: The default type, renders a standard hyperlink.</li>
        <li><b>button</b>: Renders a clickable button within the dropdown.</li>
        <li><b>header</b>: Creates a non-clickable header to separate sections.</li>
        <li><b>divider</b>: Adds a visual divider to separate items.</li>
      </ul>
      <p class="not-prose">You can also add custom items, but these four types are provided natively for a consistent UI experience.</p>
      {#snippet example()}
      <div>
        <Dropdown label="Dropdown">
          <!-- Header item -->
          <DropdownItem type="header">Section Header</DropdownItem>
          <!-- Link item (default) -->
          <DropdownItem url="/">Link 1</DropdownItem>
          <DropdownItem url="/">Link 2</DropdownItem>
          <!-- Divider item -->
          <DropdownItem type="divider"></DropdownItem>
          <!-- Button item -->
          <DropdownItem type="button">Button 1</DropdownItem>
        </Dropdown>
      </div>
      {/snippet}

      {#snippet code()}
```html
<Dropdown label="Dropdown">
  <!-- Header item -->
  <DropdownItem type="header">Section Header</DropdownItem>
  <!-- Link item (default) -->
  <DropdownItem url="/">Link 1</DropdownItem>
  <DropdownItem url="/">Link 2</DropdownItem>
  <!-- Divider item -->
  <DropdownItem type="divider" />
  <!-- Button item -->
  <DropdownItem type="button">Button 1</DropdownItem>
</Dropdown>
```
      {/snippet}
    </Example>
    <p class="not-prose">This setup ensures your dropdown maintains a uniform appearance and functionality across different types of items.</p>
  </DocBlock>

  <DocBlock title="Active State">
    <Example>
      <p class="not-prose">The <code>active</code> prop in the <code>DropdownItem</code> component is used to indicate whether the item is currently active. This prop accepts a boolean value and defaults to <code>false</code>. When set to <code>true</code>, the item will appear highlighted to show it is active.</p>
      {#snippet example()}
      <div>
        <Dropdown label="Dropdown">
          <DropdownItem url="/"></DropdownItem> Link>
          <DropdownItem url="/" active={true}>Active Link</DropdownItem>
          <DropdownItem url="/">Link</DropdownItem>
        </Dropdown>
      </div>
      {/snippet}

      {#snippet code()}
```html
<Dropdown label="Dropdown">
  <DropdownItem url="/"></DropdownItem> Link>
  <DropdownItem url="/" active={true}>Active Link</DropdownItem>
  <DropdownItem url="/">Link</DropdownItem>
</Dropdown>
```
      {/snippet}
    </Example>
    <p class="not-prose">Using the active prop helps visually distinguish the selected or currently active item within the dropdown.</p>
  </DocBlock>

  <DocBlock title="Dropdown Item's Content">
    <Example>
      <p class="not-prose">The <code>DropdownItem</code> component provides two snippet blocks, <code>startItem</code> and <code>endItem</code>, for adding custom content before or after the dropdown text.</p>
      <ul class="my-0">
        <li><b>startItem</b>: Displays content before the dropdown text, ideal for icons, images, or similar elements.</li>
        <li><b>endItem</b>: Shows content after the dropdown text, perfect for badges, extra messages, or additional icons.</li>
      </ul>
      {#snippet example()}
      <div>
        <Dropdown label="Dropdown" size="md">
          <DropdownItem url="/">
            {#snippet startItem()}
              <Svg>
                <path d="M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2M8 1.918l-.797.161A4 4 0 0 0 4 6c0 .628-.134 2.197-.459 3.742-.16.767-.376 1.566-.663 2.258h10.244c-.287-.692-.502-1.49-.663-2.258C12.134 8.197 12 6.628 12 6a4 4 0 0 0-3.203-3.92zM14.22 12c.223.447.481.801.78 1H1c.299-.199.557-.553.78-1C2.68 10.2 3 6.88 3 6c0-2.42 1.72-4.44 4.005-4.901a1 1 0 1 1 1.99 0A5 5 0 0 1 13 6c0 .88.32 4.2 1.22 6"/>
              </Svg>
            {/snippet}
            Notification
          </DropdownItem>
          <DropdownItem url="/">
            Notification
            {#snippet endItem()}
              <Badge>New</Badge>
            {/snippet}
          </DropdownItem>
          <DropdownItem url="/">
            {#snippet startItem()}
              <Svg>
                <path d="M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2M8 1.918l-.797.161A4 4 0 0 0 4 6c0 .628-.134 2.197-.459 3.742-.16.767-.376 1.566-.663 2.258h10.244c-.287-.692-.502-1.49-.663-2.258C12.134 8.197 12 6.628 12 6a4 4 0 0 0-3.203-3.92zM14.22 12c.223.447.481.801.78 1H1c.299-.199.557-.553.78-1C2.68 10.2 3 6.88 3 6c0-2.42 1.72-4.44 4.005-4.901a1 1 0 1 1 1.99 0A5 5 0 0 1 13 6c0 .88.32 4.2 1.22 6"/>
              </Svg>
            {/snippet}
            Notification
            {#snippet endItem()}
              <Badge>New</Badge>
            {/snippet}
          </DropdownItem>
        </Dropdown>
      </div>
      {/snippet}

      {#snippet code()}
```html
<Dropdown label="Dropdown" size="md">
  <DropdownItem url="/">
    {#snippet startItem()}
      <Svg>
        <path d="M8 16a2 2 0 0 ... 13 6c0 .88.32 4.2 1.22 6"/>
      </Svg>
    {/snippet}
    Notification
  </DropdownItem>
  <DropdownItem url="/">
    Notification
    {#snippet endItem()}
      <Badge>New</Badge>
    {/snippet}
  </DropdownItem>
  <DropdownItem url="/">
    {#snippet startItem()}
      <Svg>
        <path d="M8 16a2 2 0 0 ... 13 6c0 .88.32 4.2 1.22 6"/>
      </Svg>
    {/snippet}
    Notification
    {#snippet endItem()}
      <Badge>New</Badge>
    {/snippet}
  </DropdownItem>
</Dropdown>
```
      {/snippet}
    </Example>
    <p class="not-prose">These snippet blocks provide flexibility to enhance the dropdown items with additional content while maintaining a clean and consistent design.</p>
  </DocBlock>

  <DocBlock title="Custom Item">
    <Example>
      <p class="not-prose">The <code>DropdownItem</code> component also supports fully custom content, allowing you to create items beyond the predefined types. By using custom markup within <code>DropdownItem</code>, you can design complex or unique dropdown items to fit your specific needs.</p>
      {#snippet example()}
      <div>
        <Dropdown label="Custom Dropdown" size="md">
          <DropdownItem url="/" class="hover:bg-brand-primary-500 hover:text-on-brand-primary-500 flex-wrap">
            <div class="w-full text-start">
              <p class="font-bold">Svelte 5 Component</p>
              Kickstart your development with the theui-svelte, a comprehensive component library designed for the Svelte ecosystem.
            </div>
          </DropdownItem>
        </Dropdown>
      </div>
      {/snippet}

      {#snippet code()}
```html
<Dropdown label="Custom Dropdown" size="md">
  <DropdownItem url="/" class="hover:bg-brand-primary-500 ... flex-wrap">
    <div class="w-full text-start">
      <p class="font-bold">Svelte 5 Component</p>
      Kickstart your ... ecosystem.
    </div>
  </DropdownItem>
</Dropdown>
```
      {/snippet}
    </Example>
    <p class="not-prose">This approach offers full flexibility, enabling you to craft dropdown items with custom content and styling, perfect for tailored user interfaces.</p>
  </DocBlock>

  <DocBlock title="Animation">
    <Example>
      <p class="not-prose">The <code>animation</code> prop controls how the dropdown appears when opened. It supports multiple animation styles to enhance user experience. By default, the dropdown uses the <code>slide-up</code> animation. Adjust this prop to match your design preferences.</p>
      <ul class="my-0">
        <li><b>slide-left</b>: The dropdown slides in from the left.</li>
        <li><b>slide-up</b>: The default animation, sliding in from the bottom.</li>
        <li><b>slide-right</b>: Slides in from the right.</li>
        <li><b>slide-down</b>: Slides in from the top.</li>
        <li><b>fade</b>: A smooth fade-in animation.</li>
        <li><b>zoom-in</b>: The dropdown zooms in from a smaller size.</li>
        <li><b>zoom-out</b>: The dropdown zooms out from a larger size.</li>
      </ul>
      {#snippet example()}
      <div class="flex justify-between w-full flex-wrap gap-y-4">
        <Dropdown label="Slide left" animation="slide-left">
          {@render dropdownBasic()}
        </Dropdown>
        <Dropdown label="Slide up" animation="slide-up">
          {@render dropdownBasic()}
        </Dropdown>
        <Dropdown label="Slide right" animation="slide-right">
          {@render dropdownBasic()}
        </Dropdown>
        <Dropdown label="Slide down" animation="slide-down">
          {@render dropdownBasic()}
        </Dropdown>
        <Dropdown label="Fade" animation="fade">
          {@render dropdownBasic()}
        </Dropdown>
        <Dropdown label="Zoom in" animation="zoom-in">
          {@render dropdownBasic()}
        </Dropdown>
        <Dropdown label="Zoom out" animation="zoom-out">
          {@render dropdownBasic()}
        </Dropdown>
      </div>
      {/snippet}

      {#snippet code()}
```html
<Dropdown animation="slide-left"> ... </Dropdown>
<Dropdown animation="slide-up"> ... </Dropdown>  <!-- Default -->
<Dropdown animation="slide-right"> ... </Dropdown>
<Dropdown animation="slide-down"> ... </Dropdown>
<Dropdown animation="fade"> ... </Dropdown>
<Dropdown animation="zoom-in"> ... </Dropdown>
<Dropdown animation="zoom-out"> ... </Dropdown>
```
      {/snippet}
    </Example>
    <p class="not-prose">These animation options help create a more engaging and visually appealing dropdown experience.</p>
  </DocBlock>

  <DocBlock title="Animation Speed">
    <p class="not-prose">The <code>animateSpeed</code> prop controls the speed of the dropdown animation, allowing for smooth transitions at different paces. It accepts the following values <code>none</code>, <code>slower</code>, <code>slow</code>, <code>normal</code>, <code>fast</code> and <code>faster</code></p>
    <Example>
      {#snippet example()}
      <div class="flex justify-between w-full flex-wrap gap-y-4">
        <Dropdown label="Slower" animateSpeed="slower">
          {@render dropdownBasic()}
        </Dropdown>
        <Dropdown label="Slow" animateSpeed="slow">
          {@render dropdownBasic()}
        </Dropdown>
        <Dropdown label="Medium" animateSpeed="medium">
          {@render dropdownBasic()}
        </Dropdown>
        <Dropdown label="Fast" animateSpeed="fast">
          {@render dropdownBasic()}
        </Dropdown>
        <Dropdown label="Faster" animateSpeed="faster">
          {@render dropdownBasic()}
        </Dropdown>
        <Dropdown label="No Animate" animateSpeed="none">
          {@render dropdownBasic()}
        </Dropdown>
      </div>
      {/snippet}

      {#snippet code()}
```html
<Dropdown animateSpeed="slower"> ... </Dropdown>
<Dropdown animateSpeed="slow"> ... </Dropdown>
<Dropdown animateSpeed="medium"> ... </Dropdown>
<Dropdown animateSpeed="fast"> ... </Dropdown>
<Dropdown animateSpeed="faster"> ... </Dropdown>
<Dropdown animateSpeed="none"> ... </Dropdown>
```
      {/snippet}
    </Example>
    <p class="not-prose">This allows you to tailor the dropdown's animation speed to fit your design needs and improve user interaction.</p>
  </DocBlock>

  <DocBlock title="Dropdown Backdrop">
    <p class="not-prose">The <code>backdrop</code> prop determines whether a backdrop is shown behind the dropdown. When set to <code>true</code>, a backdrop is displayed; by default, it is set to <code>false</code>, meaning no backdrop is shown.</p>
    <Example>
      {#snippet example()}
      <div>
        <Dropdown label="Dropdown" backdrop={true}>
          {@render dropdownBasic()}
        </Dropdown>
      </div>
      {/snippet}

      {#snippet code()}
```html
<!-- With backdrop -->
<Dropdown backdrop={true}> ... </Dropdown>

<!-- Without backdrop -->
<Dropdown backdrop={false}> ... </Dropdown>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Close on Outside Click">
    <p class="not-prose">The <code>closeOnBlur</code> prop controls whether the dropdown closes when it loses focus. By default, it is set to <code>true</code>, meaning the dropdown will close when you click outside of it. Setting it to <code>false</code> will keep the dropdown open even when it loses focus.</p>
    <Example>
      {#snippet example()}
      <div>
        <Dropdown label="Control Outside Click" closeOnBlur={false}>
          {@render dropdownBasic()}
        </Dropdown>
      </div>
      {/snippet}

      {#snippet code()}
```html
<!-- Keep the dropdown open on blur -->
<Dropdown closeOnBlur={false}> ... </Dropdown>

<!-- Default behavior: Close dropdown on blur -->
<Dropdown closeOnBlur={true}> ... </Dropdown>

```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Customization">
    <Example>
      <p class="not-prose">The <code>Dropdown</code> component provides several props to customize the appearance of the dropdown items and container. These props allow you to apply custom classes for different elements, giving you full control over the styling.</p>
      <ul class="my-0">
        <li><b>containerClasses</b>: Custom classes for the outer dropdown container.</li>
        <li><b>dropdownClasses</b>: Customizes the dropdown content area.</li>
        <li><b>linkClasses</b>: Sets custom classes for regular dropdown links.</li>
        <li><b>activeLinkClasses</b>: Applies custom classes to the active dropdown item.</li>
        <li><b>dividerClasses</b>: Customizes the appearance of divider items.</li>
        <li><b>headerClasses</b>: Adds custom styling to header items within the dropdown.</li>
      </ul>
      {#snippet example()}
      <div>
        <Dropdown
          label="Customized Dropdown"
          containerClasses="border-4 rounded-lg"
          dropdownClasses="shadow-lg bg-green-50"
          linkClasses="text-green-500 hover:bg-green-100"
          activeLinkClasses="text-white bg-green-500"
          dividerClasses="border-b-2 border-green-200"
          headerClasses="text-green-600 text-xs"
        >
          <DropdownItem url="/">Link 1</DropdownItem>
          <DropdownItem type="header">Section Header</DropdownItem>
          <DropdownItem type="divider" />
          <DropdownItem url="/" active={true}>Link 2</DropdownItem>
        </Dropdown>
      </div>
      {/snippet}

      {#snippet code()}
```html
<Dropdown
  label="Customized Dropdown"
  containerClasses="border-4 rounded-lg"
  dropdownClasses="shadow-lg bg-green-50"
  linkClasses="text-green-500 hover:bg-green-100"
  activeLinkClasses="text-white bg-green-500"
  dividerClasses="border-b-2 border-green-200"
  headerClasses="text-green-600 text-xs"
>
  <DropdownItem url="/">Link 1</DropdownItem>
  <DropdownItem type="header">Section Header</DropdownItem>
  <DropdownItem type="divider" />
  <DropdownItem url="/" active={true}>Link 2</DropdownItem>
</Dropdown>
```
      {/snippet}
    </Example>
    <p class="not-prose">These props enable you to tailor the dropdown's look and feel, ensuring it aligns with your design preferences and project requirements.</p>
  </DocBlock>

  <DocBlock title="Configuration">
    <DropdownConfig title="Dropdown" component={component.dropdown} />
    <ItemConfig title="Dropdown Item" component={component.item} />
  </DocBlock>

  {#snippet sidebar()}
    <a href={processID("About")}>About</a>
    <a href={processID("Example")}>Example</a>
    <a href={processID("Dropdown Sizing")}>Sizing</a>
    <a href={processID("Alignment")}>Alignment</a>
    <a href={processID("Dropdown Trigger Event")}>Trigger Event</a>
    <a href={processID("Custom Dropdown Trigger")}>Custom Trigger</a>
    <a href={processID("Item Types")}>Item Types</a>
    <a href={processID("Active State")}>Active State</a>
    <a href={processID("Dropdown Item's Icon")}>Dropdown Item's Icon</a>
    <a href={processID("Custom Item")}>Custom Item</a>
    <a href={processID("Animation")}>Animation</a>
    <a href={processID("Animation Speed")}>Animation Speed</a>
    <a href={processID("Dropdown Backdrop")}>Dropdown Backdrop</a>
    <a href={processID("Close on Outside Click")}>Close on Outside Click</a>
    <a href={processID("Customization")}>Customization</a>
    <a href={processID("Configuration")}>Configuration</a>
  {/snippet}
</DocLayout>