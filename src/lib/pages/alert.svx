---
title: Alert
dir: ".lib/pages"
description: Utilize theui-svelte's Alert component to display crucial messages and notifications in your Svelte applications with customizable styles.
---

<script lang="ts">
  import DocLayout from "$lib/ui/doc/DocLayout.svelte";
  import DocHead from "$lib/ui/doc/Head.svelte";
  import DocBlock from "$lib/ui/doc/Block.svelte";
  import Code from "$lib/ui/doc/CodeBlock.svelte";
  import Example from "$lib/ui/doc/Example.svelte";
  import ConfigComponent from "$lib/ui/doc/ConfigComponent.svelte";
  import { processID, editURL } from "$lib";
  let { component }: {component: any } = $props();

  import { Alert } from "theui-svelte";
</script>

<DocLayout>
  <DocHead title="Alert" text="The Alert component displays feedback or contextual messages to your users. Using the Alert component, you can provide various types of feedback such as success, error, warning, or general information." edit_url={editURL("alert")} />

  <DocBlock title="Example">
    <p class="not-prose">Import the <code>Alert</code> component to use it in your project. There are 4 types of alert you can create using the <code>type</code> prop. The default type is <code>error</code>. Other types are <code>'info'</code>, <code>'success'</code> and <code>'warning'</code>. Here are some examples:</p>
    <Example>
      {#snippet example()}
        <div class="w-full">
          <Alert>I'm error (default) alert!</Alert>
          <Alert type="info">I'm info alert!</Alert>
          <Alert type="success">I'm success alert!</Alert>
          <Alert type="warning">I'm warning alert!</Alert>
        </div>
      {/snippet}
      {#snippet code()}

```html
<script>
  import { Alert } from "theui-svelte";
</script>

<Alert>I'm error (default) alert!</Alert>
<Alert type="info">I'm info alert!</Alert>
<Alert type="success">I'm success alert!</Alert>
<Alert type="warning">I'm warning alert!</Alert>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Icon">
    <p class="not-prose">The <code>Alert</code> component supports predefined icons for each alert type for for better visual feedback. By default, no icon is shown. Simply add the <code>icon</code> attribute to display an icon matching the alert type (success, error, warning, or info). No value needed - it auto-selects the appropriate icon.</p>
    <Example>
      {#snippet example()}
      <div class="w-full">
        <Alert icon>I'm error (default) alert!</Alert>
        <Alert icon type="info">I'm info alert!</Alert>
        <Alert icon type="success">I'm success alert!</Alert>
        <Alert icon type="warning">I'm warning alert!</Alert>
      </div>
      {/snippet}
      {#snippet code()}

```html
<Alert icon>...</Alert>
<Alert icon type="info">...</Alert>
<Alert icon type="success">...</Alert>
<Alert icon type="warning">...</Alert>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Theme">
    <p class="not-prose">Use the <code>theme</code> prop to switch between two Alert styles that complement your design system.</p>
    <Example title="Available Themes">
      <ul>
        <li><b>default</b>: This is the standard theme, offering a balanced look suitable for most use cases.</li>
        <li><b>soft</b>: A lighter variant that provides a more subtle and softer appearance.</li>
      </ul>
      {#snippet example()}
      <div class="w-full">
        <Alert theme="default">This is an error message in default theme!</Alert>
        <Alert theme="soft">This is an error message in light theme!</Alert>
      </div>
      {/snippet}
      {#snippet code()}

```html
<Alert theme="default">...</Alert>
<Alert theme="soft">...</Alert>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Variant">
    <p class="not-prose">The <code>Alert</code> component also supports different visual variants to further customize its appearance using the <code>variant</code> prop. These variants determine the structural style of the alert.</p>
    <Example title="Available Variants">
      <ul>
        <li><b>card</b>: Displays the alert as a card with defined borders and padding.</li>
        <li><b>borderTop</b>: Highlights the alert with a border at the top.</li>
        <li><b>borderBottom</b>: Adds a border at the bottom of the alert.</li>
        <li><b>borderStart</b>: Features a border on the starting side (left in LTR, right in RTL).</li>
      </ul>
      {#snippet example()}
      <div class="w-full">
        <Alert theme="soft" variant="card">This is a card (default) variant alert!</Alert>
        <Alert theme="soft" variant="borderTop">This alert has a top border!</Alert>
        <Alert theme="soft" variant="borderBottom">This alert has a bottom border!</Alert>
        <Alert theme="soft" variant="borderStart">This alert has a starting border!</Alert>
      </div>
      {/snippet}
      {#snippet code()}

```html
<Alert theme="soft" variant="card">...</Alert>
<Alert theme="soft" variant="borderTop">...</Alert>
<Alert theme="soft" variant="borderBottom">...</Alert>
<Alert theme="soft" variant="borderStart">...</Alert>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Dismissible Alert">
    <p class="not-prose">You can close alerts with a click - just add the <code>dismissible</code> attribute. The component handles the rest, adding a close button automatically.</p>
    <Example>
      {#snippet example()}
      <div class="w-full">
        <Alert dismissible>This is a dismissible alert message!</Alert>
      </div>
      {/snippet}
      {#snippet code()}

```html
<Alert dismissible>...</Alert>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Rounded Corners">
    <Example>
      <p class="not-prose">You can adjust the alert's corners using the <code>rounded</code> prop to tweak the border radius. Choose from preset sizes like <code>"sm"</code>, <code>"md"</code> (default), <code>"lg"</code>, <code>"xl"</code>, <code>"full"</code>, or <code>"none"</code> for a polished look.</p>
      {#snippet example()}
      <div class="w-full">
        <Alert rounded="none">This Alert has no rounded corners (sharp edges).</Alert>
        <Alert rounded="sm">This Alert has small rounded corners.</Alert>
        <Alert rounded="md">This Alert has medium rounded corners (default).</Alert>
        <Alert rounded="lg">This Alert has large rounded corners.</Alert>
        <Alert rounded="xl">This Alert has extra-large rounded corners.</Alert>
        <Alert rounded="full">This Alert has fully rounded corners.</Alert>
      </div>
      {/snippet}
      {#snippet code()}

```html
<Alert rounded="none"> ... </Alert>
<Alert rounded="sm"> ... </Alert>
<Alert rounded="md"> ... </Alert>
<Alert rounded="lg"> ... </Alert>
<Alert rounded="xl"> ... </Alert>
<Alert rounded="full"> ... </Alert>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Customization">
    <Example>
      <p class="not-prose">The <code>Alert</code> component provides full styling control through its class attribute, letting you customize every detail to match your appâ€™s design. Whether tweaking colors or overhauling layouts, this flexibility ensures alerts blend seamlessly with your UI while maintaining brand consistency.</p>
      {#snippet example()}
      <div class="w-full">
        <Alert class="bg-gradient-to-r from-red-200 dark:from-red-800 to-yellow-400 dark:to-yellow-500 text-default">I'm custom styled alert message!</Alert>
      </div>
      {/snippet}
      {#snippet code()}

```html
<Alert class="bg-gradient-to-r from-red-200 dark:from-red-800 to-yellow-400 dark:to-yellow-500 text-default">
  I'm custom styled alert message!
</Alert>
```
      {/snippet}
    </Example>
  </DocBlock>

  <DocBlock title="Accessibility">
    <p class="not-prose">Designed for screen readers from the ground up, the component is built with accessibility in mind, handling all necessary ARIA attributes, including <code>role="alert"</code> and <code>aria-label="Close alert"</code>, to ensure compatibility with assistive technologies. These attributes are automatically applied, so you don't need to configure them manually.</p>
    <p class="not-prose font-bold">The only consideration required is maintaining proper color contrast for the alert's text and background to ensure readability and compliance with accessibility standards.</p>
  </DocBlock>

  <DocBlock title="Configuration">
    <ConfigComponent {component} />
  </DocBlock>

  {#snippet sidebar()}
    <a href={processID("Example")}>Example</a>
    <a href={processID("Icon")}>Alert icon</a>
    <a href={processID("Theme")}>Alert theme</a>
    <a href={processID("Variant")}>Alert Variant</a>
    <a href={processID("Dismissible Alert")}>Dismissible alert</a>
    <a href={processID("Rounded Corners")}>Rounded Corners</a>
    <a href={processID("Customization")}>Customization</a>
    <a href={processID("Accessibility")}>Accessibility</a>
    <a href={processID("Configuration")}>Configuration</a>
  {/snippet}

</DocLayout>